/* PrismParser.java */
/* Generated By:JavaCC: Do not edit this line. PrismParser.java */
package parser;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;

import jltl2ba.SimpleLTL;
import parser.BooleanUtils;
import parser.ast.*;
import parser.type.*;
import prism.ModelInfo;
import parser.visitor.*;
import prism.ModelType;
import prism.PrismLangException;

@SuppressWarnings({"unused", "static-access", "serial"})
public class PrismParser implements PrismParserConstants {
        // The model associated with the properties file being parsed
        private static ModelInfo modelInfo;

        // List of keyword strings
        private static ArrayList<String> keywordList = new ArrayList<String>();
        static {
                keywordList.clear();
                for (int i = PrismParserConstants.COMMENT+1; i < PrismParserConstants.NOT; i++) {
                        keywordList.add(PrismParserConstants.tokenImage[i].replaceAll("\"", ""));
                }
        }

        //

        private static Map<String, Integer> lineLengths = new HashMap<String, Integer>();
        private static Expression ZERO = new ExpressionLiteral(TypeInt.getInstance(), 0);

        //-----------------------------------------------------------------------------------
        // Main method for testing purposes
        //-----------------------------------------------------------------------------------

        public static void main(String[] args)
        {
                PrismParser p = null;
                InputStream str = null;
                String src = null;

                try {
                        if (args.length == 0) {
                                System.out.println("Usage: java parser.PrismParser <switch> [<file>]");
                                System.out.println("Where: <switch> = -modulesfile or -mf");
                                System.out.println("                  -propertiesfile or -pf");
                                System.out.println("                  -expression or -e");
                                System.out.println("                  -ltl or -l");
                                System.exit(1);
                        }

                        p = new PrismParser();
                        str = (args.length > 1) ? new FileInputStream(args[1]) : System.in;
                        src = (args.length > 1) ? "file "+args[1] : "stdin";
                        System.out.println("Reading from "+src+"...\n");

                        if (args[0].equals("-modulesfile") || args[0].equals("-mf")) {
                                ModulesFile mf = p.parseModulesFile(str);
                                System.out.print("Modules file:\n=============\n\n" + mf);
                                System.out.print("\nTree:\n=====\n" + mf.toTreeString());
                                mf.tidyUp();
                                System.out.print("\nAnd after expansion:\n====================\n\n" +mf);
                        }
                        else if (args[0].equals("-propertiesfile") || args[0].equals("-pf")) {
                                PropertiesFile pf = p.parsePropertiesFile(new ModulesFile(), str);
                                System.out.print("Properties file:\n================\n\n" + pf);
                                System.out.print("\nTree:\n=====\n" + pf.toTreeString());
                                pf.tidyUp();
                                System.out.print("\nAnd after expansion:\n====================\n\n" + pf);
                        }
                        else if (args[0].equals("-expression") || args[0].equals("-e")) {
                                Expression expr = p.parseSingleExpression(str);
                                System.out.println("Expression: " + expr.toString());
                                System.out.print("Tree:\n=====\n" + expr.toTreeString());
                                expr.typeCheck();
                                expr.semanticCheck();
                                System.out.println("Type: " + expr.getType().getTypeString());
                                System.out.println("Eval: " + expr.evaluate());
                        }
                        else if (args[0].equals("-ltl") || args[0].equals("-l")) {
                                Expression expr = p.parseSingleLTLFormula(str);
                                expr = (Expression) expr.accept(new ASTTraverseModify() {
                                        public Object visit(ExpressionIdent e) throws PrismLangException
                                        {
                                                return new parser.ast.ExpressionVar(e.getName(), TypeBool.getInstance());
                                        }
                                });
                                System.out.println("LTL formula: " + expr.toString());
                                System.out.print("Tree:\n=====\n" + expr.toTreeString());
                                expr.typeCheck();
                                //expr.semanticCheck();
                                System.out.println("Type: " + expr.getType().getTypeString());
                                boolean pnf = Expression.isPositiveNormalFormLTL(expr);
                                System.out.println("Positive normal form: " + pnf);
                                System.out.println("Syntactically co-safe: " + Expression.isCoSafeLTLSyntactic(expr));
                                if (!pnf) {
                                        Expression exprPnf = BooleanUtils.convertLTLToPositiveNormalForm(expr.deepCopy());
                                        System.out.println("Positive normal form conversion: " + exprPnf);
                                        System.out.println("Syntactically co-safe: " + Expression.isCoSafeLTLSyntactic(exprPnf));
                                }
                                Expression expr2 = (Expression) expr.deepCopy().accept(new ASTTraverseModify() {
                                        public Object visit(ExpressionVar e) throws PrismLangException
                                        {
                                                        return new parser.ast.ExpressionLabel(e.getName());
                                        }
                                });
                                SimpleLTL sltl = expr2.convertForJltl2ba();
                                System.out.println("LBT: " + sltl.toStringLBT());
                                System.out.println("Spot: " + sltl.toStringSpot());
                                System.out.println("Spin: " + sltl.toStringSpin());
                        } else {
                                System.out.println("Unknown switch"); System.exit(1);
                        }
                }
                catch (PrismLangException e) {
                        System.out.println("Error in "+src+": " + e.getMessage()+"."); System.exit(1);
                }
                catch (FileNotFoundException e) {
                        System.out.println(e); System.exit(1);
                }
        }

        //-----------------------------------------------------------------------------------
        // Methods called by Prism
        //-----------------------------------------------------------------------------------

        // Constructor

        public PrismParser()
        {
                // Call default constructor
                this(System.in);
                setTabSize(8);
        }

        // Parse modules file

        public ModulesFile parseModulesFile(InputStream str) throws PrismLangException { return parseModulesFile(str, null); }

        public ModulesFile parseModulesFile(InputStream str, ModelType typeOverride) throws PrismLangException
        {
                ModulesFile mf = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        mf = ModulesFile();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                // Override type of model if requested
                if (typeOverride != null) {
                        mf.setModelTypeInFile(typeOverride);
                }

                return mf;
        }

        // Parse properties file (pass ModulesFile in to get at its constants)

        public PropertiesFile parsePropertiesFile(ModelInfo modelInfo, InputStream str) throws PrismLangException
        { return parsePropertiesFile(modelInfo, str, false); }

        public PropertiesFile parsePropertiesFile(ModelInfo modelInfo, InputStream str, boolean strict) throws PrismLangException
        {
                PropertiesFile pf = null;

                // (Re)start parser
                ReInit(str);
                this.modelInfo = modelInfo;
                // Parse
                try {
                        pf = strict ? PropertiesFile() : PropertiesFileSemicolonless();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }

                return pf;
        }

        // Parse a single expression

        public Expression parseSingleExpression(InputStream str) throws PrismLangException
        {
                Expression expr = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        expr = SingleExpression();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return expr;
        }

        // Parse a single LTL formula

        public Expression parseSingleLTLFormula(InputStream str) throws PrismLangException
        {
                Expression expr = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        expr = SingleLTLFormula();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return expr;
        }

        // Parse a for loop

        public ForLoop parseForLoop(InputStream str) throws PrismLangException
        {
                ForLoop fl = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        fl = ForLoop();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return fl;
        }

        //-----------------------------------------------------------------------------------
        // Some utility methods
        //-----------------------------------------------------------------------------------

        /**
	 * Get comment block directly preceding a token and remove "//" characters
	 */
        public static String getPrecedingCommentBlock(Token firstToken)
        {
                String comment = "", s;
                Token t = firstToken;

                // extract any comment from the previous lines of the file
                if (t.specialToken != null && !(t.specialToken.kind == PrismParserConstants.WHITESPACE && t.specialToken.image.matches("[\\n\\r]*"))) {
                        // trace back thru special tokens that are comments
                        t = t.specialToken;
                        while (t.specialToken != null && !(t.specialToken.kind == PrismParserConstants.WHITESPACE && t.specialToken.image.matches("[\\n\\r]*")))
                                t = t.specialToken;
                        // concatenate comment special tokens
                        while (t != null) {
                                s = t.image;
                                // strip any nasty carriage returns
                                s = s.replaceAll("\r", "");
                                // remove "//" and preceding/subsequent spaces/tabs from comments
                                if (t.kind == PrismParserConstants.COMMENT) {
                                        while (comment.length() > 0 && (""+comment.charAt(comment.length()-1)).matches("[ \t]"))
                                                comment = comment.substring(0,comment.length()-1);
                                        s = s.substring(2);
                                        s = s.replaceFirst("[ \t]*", "");
                                }
                                comment += s;
                                t = t.next;
                        }
                }
                // remove final new line (if present)
                if (comment.length() > 0 && (comment.charAt(comment.length()-1) == '\n'))
                        comment = comment.substring(0,comment.length()-1);

                return comment;
        }

        // Add "//"s into comment block

        public static String slashCommentBlock(String comment)
        {
                int i;
                String s, res = "";
                // break into lines
                while ((i = comment.indexOf("\n")) != -1) {
                        s = comment.substring(0, i);
                        comment = comment.substring(i+1);
                        // add "//" to non-empty lines
                        if (s.trim().length()>0) res += "// " + s;
                        res += "\n";
                }
                // deal with any trailing characters (with no new line ending them)
                if (comment.trim().length()>0) res += "// " + comment + "\n";
                return res;
        }

        /**
	 * Test a string to see if it is a PRISM language keyword.
	 */
        public static boolean isKeyword(String s)
        {
                return keywordList.contains(s);
        }

        /**
	 * Get access to the list of all PRISM language keywords.
	 */
        public static List<String> getListOfKeywords()
        {
                return keywordList;
        }

        /**
	 * Set the tab size used by the lexer/parser.
	 */
        public void setTabSize(int size)
        {
                SimpleCharStream.setTabSize(size);
        }

        /**
	 * Get the tab size used by the lexer/parser.
	 */
        public int getTabSize()
        {
                return SimpleCharStream.getTabSize();
        }

        /**
	 * Generate a syntax error (PrismLangException) from a ParseException.
	 */
        protected PrismLangException generateSyntaxError(ParseException e)
        {
                if (e == null) return new PrismLangException("Syntax error");
                // No token: was prob created manually so use message if present
                if (e.currentToken == null) {
                        String msg = e.getMessage();
                        String exMsg = "Syntax error";
                        if (msg != null && msg.length() > 0)
                                exMsg += ": " + msg;
                        return new PrismLangException(exMsg);
                }
                // Use current/next token to find location of error
                // But don't use error message if too long (esp if generated by JavaCC)
                else {
                        ExpressionIdent tmp;
                        if (e.currentToken.next == null) {
                                tmp = new ExpressionIdent(e.currentToken.image);
                                tmp.setPosition(e.currentToken);
                        } else {
                                tmp = new ExpressionIdent(e.currentToken.next.image);
                                tmp.setPosition(e.currentToken.next);
                        }
                        String msg = e.getMessage();
                        String exMsg = "Syntax error";
                        if (msg != null && msg.length() > 0 && msg.length() < 20)
                                exMsg += ": " + msg;
                        return new PrismLangException(exMsg, tmp);
                }
        }

        //-----------------------------------------------------------------------------------
        // A few classes for temporary storage of bits of the AST
        //-----------------------------------------------------------------------------------

        static class ExpressionPair { public Expression expr1 = null; public Expression expr2 = null; }

//-----------------------------------------------------------------------------------
// Top-level productions
//-----------------------------------------------------------------------------------

// Modules file
  static final public 
ModulesFile ModulesFile() throws ParseException, PrismLangException {ModelType type = null;
        int typeCount = 0;
        Token typeDupe = null;
        Declaration global;
        parser.ast.Module m = null;
        RenamedModule rm = null;
        RewardStructWithArrays rs = null;
        Expression init = null;
        ObservableVars obsVars = null;
        Observable obs = null;
        int initCount = 0;
        Expression initDupe = null;
        Player player = null;
        ModulesFile mf = new ModulesFile();
        Token begin = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONST:
      case CSG:
      case CTMC:
      case CTMDP:
      case DTMC:
      case FORMULA:
      case GLOBAL:
      case INIT:
      case LABEL:
      case MDP:
      case MODULE:
      case NONDETERMINISTIC:
      case OBSERVABLE:
      case OBSERVABLES:
      case PLAYER:
      case POMDP:
      case POPTA:
      case PROBABILISTIC:
      case PROB:
      case PTA:
      case RATE:
      case REWARDS:
      case STOCHASTIC:
      case STPG:
      case SMG:
      case SYSTEM:
      case TPTG:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CSG:
      case CTMC:
      case CTMDP:
      case DTMC:
      case MDP:
      case NONDETERMINISTIC:
      case POMDP:
      case POPTA:
      case PROBABILISTIC:
      case PTA:
      case STOCHASTIC:
      case STPG:
      case SMG:
      case TPTG:{
begin = getToken(1);
        type = ModulesFileType();
typeCount++; if (typeCount == 2) typeDupe = getToken(0);
        break;
        }
      case FORMULA:{
        FormulaDef(mf.getFormulaList());
        break;
        }
      case LABEL:{
        LabelDef(mf.getLabelList());
        break;
        }
      case CONST:
      case PROB:
      case RATE:{
        ConstantDef(mf.getConstantList());
        break;
        }
      case GLOBAL:{
        // Global variable
                global = GlobalDecl();
mf.addGlobal(global);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_1(2147483647)) {
          rm = RenamedModule();
mf.addRenamedModule(rm);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MODULE:{
            // Module
                    m = Module();
mf.addModule(m);
            break;
            }
          case REWARDS:{
            // Reward structure
                    rs = RewardStruct();
mf.addRewardStruct(rs);
            break;
            }
          case INIT:{
            // Initial states ("init...endinit" construct)
                    init = Init();
mf.setInitialStates(init); initCount++; if (initCount == 2) initDupe = init;
            break;
            }
          case OBSERVABLES:{
            // Observables
                    obsVars = ObservableVars();
mf.addObservableVarList(obsVars);
            break;
            }
          case OBSERVABLE:{
            obs = Observable();
mf.addObservableDefinition(obs);
            break;
            }
          case SYSTEM:{
            SystemEndsystem(mf);
            break;
            }
          case PLAYER:{
            // Player definition
                    player = Player();
mf.addPlayer(player);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(0);
// Check for multiple instances of some items
                if (typeDupe != null) {
                        ExpressionIdent tmp = new ExpressionIdent(typeDupe.image);
                        tmp.setPosition(typeDupe);
                        {if (true) throw new PrismLangException("There were multiple model type declarations", tmp);}
                }
                if (initDupe != null) {
                        {if (true) throw new PrismLangException("There were multiple init...endinit constructs", initDupe);}
                }

                // Set model type (might be null, i.e., unspecified)
                mf.setModelTypeInFile(type);

                // Return completed ModulesFile object
                mf.setPosition(begin != null? begin: getToken(0), getToken(0));
                {if ("" != null) return mf;}
    throw new Error("Missing return statement in function");
}

// Properties file
  static final public 
PropertiesFile PropertiesFile() throws ParseException, PrismLangException {PropertiesFile pf = new PropertiesFile(modelInfo);
        Property prop;
        Token begin = null;
begin = getToken(1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case CONST:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case LABEL:
      case MAX:
      case MIN:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case PROB:
      case RATE:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case MAX:
      case MIN:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        prop = Property();
pf.addProperty(prop);
        label_3:
        while (true) {
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SEMICOLON:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
        }
        break;
        }
      case LABEL:{
        LabelDef(pf.getLabelList());
        break;
        }
      case CONST:
      case PROB:
      case RATE:{
        ConstantDef(pf.getConstantList());
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
pf.setPosition(begin, getToken(0)); {if ("" != null) return pf;}
    throw new Error("Missing return statement in function");
}

// Properties file with optional semicolons - beware of potential ambiguities
  static final public 
PropertiesFile PropertiesFileSemicolonless() throws ParseException, PrismLangException {PropertiesFile pf = new PropertiesFile(modelInfo);
        Property prop;
        Token begin = null;
begin = getToken(1);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case CONST:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case LABEL:
      case MAX:
      case MIN:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case PROB:
      case RATE:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case MAX:
      case MIN:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        prop = Property();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SEMICOLON:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(SEMICOLON);
        }
pf.addProperty(prop);
        break;
        }
      case LABEL:{
        LabelDef(pf.getLabelList());
        break;
        }
      case CONST:
      case PROB:
      case RATE:{
        ConstantDef(pf.getConstantList());
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
pf.setPosition(begin, getToken(0)); {if ("" != null) return pf;}
    throw new Error("Missing return statement in function");
}

// Property - expression, with optional name/comment
  static final public 
Property Property() throws ParseException, PrismLangException {String name = null;
        Expression expr;
        Property prop;
        Token begin = null;
begin = getToken(1);
    if (jj_2_2(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
      jj_consume_token(COLON);
    } else {
      ;
    }
    expr = ExpressionITE(true, false);
prop = new Property(expr, name, getPrecedingCommentBlock(begin));
prop.setPosition(begin, getToken(0)); {if ("" != null) return prop;}
    throw new Error("Missing return statement in function");
}

// A single expression
  static final public 
Expression SingleExpression() throws ParseException, PrismLangException {Expression ret;
    ret = Expression(false, false);
    jj_consume_token(0);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// A single LTL formula
  static final public 
Expression SingleLTLFormula() throws ParseException, PrismLangException {Expression ret;
    ret = Expression(true, true);
    jj_consume_token(0);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

//-----------------------------------------------------------------------------------
// Modules file stuff (a few bits of which are reused for property files)
//-----------------------------------------------------------------------------------

// Keyword denoting model type
  static final public 
ModelType ModulesFileType() throws ParseException {ModelType modelType = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DTMC:
    case PROBABILISTIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DTMC:{
        jj_consume_token(DTMC);
        break;
        }
      case PROBABILISTIC:{
        jj_consume_token(PROBABILISTIC);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
modelType=ModelType.DTMC;
      break;
      }
    case MDP:
    case NONDETERMINISTIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MDP:{
        jj_consume_token(MDP);
        break;
        }
      case NONDETERMINISTIC:{
        jj_consume_token(NONDETERMINISTIC);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
modelType=ModelType.MDP;
      break;
      }
    case CTMC:
    case STOCHASTIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CTMC:{
        jj_consume_token(CTMC);
        break;
        }
      case STOCHASTIC:{
        jj_consume_token(STOCHASTIC);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
modelType=ModelType.CTMC;
      break;
      }
    case CTMDP:{
      jj_consume_token(CTMDP);
modelType=ModelType.CTMDP;
      break;
      }
    case PTA:{
      jj_consume_token(PTA);
modelType=ModelType.PTA;
      break;
      }
    case POMDP:{
      jj_consume_token(POMDP);
modelType=ModelType.POMDP;
      break;
      }
    case POPTA:{
      jj_consume_token(POPTA);
modelType=ModelType.POPTA;
      break;
      }
    case STPG:{
      jj_consume_token(STPG);
modelType=ModelType.STPG;
      break;
      }
    case SMG:{
      jj_consume_token(SMG);
modelType=ModelType.SMG;
      break;
      }
    case TPTG:{
      jj_consume_token(TPTG);
modelType=ModelType.TPTG;
      break;
      }
    case CSG:{
      jj_consume_token(CSG);
modelType=ModelType.CSG;
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return modelType;}
    throw new Error("Missing return statement in function");
}

// Formula definition
  static final public 
void FormulaDef(FormulaList formulaList) throws ParseException, PrismLangException {ExpressionIdent name = null;
        Expression expr = null;
    jj_consume_token(FORMULA);
    name = IdentifierExpression();
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A:
    case E:
    case FALSE:
    case FILTER:
    case FUNC:
    case F:
    case G:
    case MAX:
    case MIN:
    case X:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case NOT:
    case LPARENTH:
    case DLBRACKET:
    case DLT:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENTPRIME:
    case REG_IDENT:{
      expr = Expression(false, false);
      break;
      }
    case LBRACE:{
      expr = EFormulaExpression();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
formulaList.addFormula(name, expr);
}

  static final public Expression EFormulaExpression() throws ParseException, PrismLangException {ExpressionITE expressionITE = new ExpressionITE(null, null, null);
        Expression result = expressionITE;
        Expression c = null;
        Expression t = null;
        boolean otherwise = false;
    jj_consume_token(LBRACE);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    c = Expression(false, false);
    jj_consume_token(COLON);
    t = Expression(false, false);
expressionITE.setOperand1(c); expressionITE.setOperand2(t);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
if (otherwise) {
                                        {if (true) throw new PrismLangException("The 'otherwise' clause must be the final guard");}
                                }
      jj_consume_token(COMMA);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        c = Expression(false, false);
        break;
        }
      case OTHERWISE:{
        jj_consume_token(OTHERWISE);
otherwise = true;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      t = Expression(false, false);
if (otherwise) {
                                        expressionITE.setOperand3(t);
                                } else {
                                        expressionITE.setOperand3(new ExpressionITE(c, t, null));
                                        expressionITE = (ExpressionITE) expressionITE.getOperand3();
                                }
    }
if (!otherwise) {
                        {if (true) throw new PrismLangException("The 'otherwise' clause is missing");}
                }
    jj_consume_token(RBRACE);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

// Label definition
  static final public 
void LabelDef(LabelList labelList) throws ParseException, PrismLangException {ExpressionIdent name = null;
        Expression expr = null;
    if (jj_2_3(2147483647)) {
      jj_consume_token(LABEL);
      jj_consume_token(DQUOTE);
      name = IdentifierExpression();
      jj_consume_token(DQUOTE);
      jj_consume_token(EQ);
      expr = Expression(false, false);
      jj_consume_token(SEMICOLON);
labelList.addLabel(name, expr);
    } else if (jj_2_4(2147483647)) {
      jj_consume_token(LABEL);
      name = IdentifierExpression();
{if (true) throw new PrismLangException("Label names must be enclosed in double-quotes", name);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Constant definition
  static final public 
void ConstantDef(ConstantList constantList) throws ParseException, PrismLangException {Type type = TypeInt.getInstance();
        ExpressionIdent name = null;
        Expression expr = null;
        int i = 0;
        int j = 0;
        int k = 0;
        Expression lowerLimit = null;
        Expression upperLimit = null;
        Expression value;
        List<List<Expression>> values = new ArrayList<List<Expression>>();
        boolean unidimensionalArray   = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONST:{
      jj_consume_token(CONST);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        name = IdentifierExpression();
type = TypeDouble.getInstance();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          token = jj_consume_token(REG_INT);
i = Integer.parseInt(token.image); lineLengths.put(name.getName(), i);
          jj_consume_token(RBRACKET);
initializeList(values, 1, i);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            jj_consume_token(LBRACKET);
            token = jj_consume_token(REG_INT);
j = Integer.parseInt(token.image); lineLengths.put(name.getName(), j);
            jj_consume_token(RBRACKET);
initializeList(values, i, j); unidimensionalArray = !unidimensionalArray;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            ;
          }
          jj_consume_token(EQ);
          jj_consume_token(LBRACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case A:
          case E:
          case FALSE:
          case FILTER:
          case FUNC:
          case F:
          case G:
          case MAX:
          case MIN:
          case X:
          case PMAXMAX:
          case PMAXMIN:
          case PMAX:
          case PMINMAX:
          case PMINMIN:
          case PMIN:
          case P:
          case RMAXMAX:
          case RMAXMIN:
          case RMAX:
          case RMINMAX:
          case RMINMIN:
          case RMIN:
          case R:
          case S:
          case TRUE:
          case NOT:
          case LPARENTH:
          case DLBRACKET:
          case DLT:
          case MINUS:
          case DQUOTE:
          case REG_INT:
          case REG_DOUBLE:
          case REG_IDENTPRIME:
          case REG_IDENT:{
            value = Expression(false, false);
values.get(0).add(value);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[17] = jj_gen;
                break label_7;
              }
              jj_consume_token(COMMA);
              value = Expression(false, false);
values.get(0).add(value);
            }
            break;
            }
          case LBRACE:{
            jj_consume_token(LBRACE);
            value = Expression(false, false);
values.get(k).add(value);
            label_8:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[18] = jj_gen;
                break label_8;
              }
              jj_consume_token(COMMA);
              value = Expression(false, false);
values.get(k).add(value);
            }
            jj_consume_token(RBRACE);
k++;
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[19] = jj_gen;
                break label_9;
              }
              jj_consume_token(COMMA);
              jj_consume_token(LBRACE);
              value = Expression(false, false);
values.get(k).add(value);
              label_10:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COMMA:{
                  ;
                  break;
                  }
                default:
                  jj_la1[20] = jj_gen;
                  break label_10;
                }
                jj_consume_token(COMMA);
                value = Expression(false, false);
values.get(k).add(value);
              }
              jj_consume_token(RBRACE);
k++;
            }
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RBRACE);
if (unidimensionalArray) {
                                                                                verifyArray(values.get(0), i);
                                                                        } else {
                                                                                verifyMatrix(values, i, j);
                                                                        }

                                                                        addConstantArrayToConstantList(constantList, name, values, unidimensionalArray);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQ:{
            jj_consume_token(EQ);
            expr = Expression(false, false);
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            ;
          }
constantList.addConstant(name, expr, type);
        }
        break;
        }
      case BOOL:
      case INT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          jj_consume_token(INT);
type = TypeInt.getInstance();
          break;
          }
        case BOOL:{
          jj_consume_token(BOOL);
type = TypeBool.getInstance();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        name = IdentifierExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          expr = Expression(false, false);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
constantList.addConstant(name, expr, type);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case PROB:
    case RATE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RATE:{
        jj_consume_token(RATE);
        break;
        }
      case PROB:{
        jj_consume_token(PROB);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
type = TypeDouble.getInstance();
      name = IdentifierExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        expr = Expression(false, false);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
constantList.addConstant(name, expr, type);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
}

  static void addConstantArrayToConstantList(ConstantList constantList, ExpressionIdent name, List<List<Expression>> list, boolean unidimensionalArray) throws ParseException {for (int i = 0; i < list.size(); i++) {
                for (int j = 0; j < list.get(i).size(); j++) {
                        ExpressionIdent expressionIdent = unidimensionalArray ? new ExpressionIdent(name.getName() + j) : new ExpressionIdent(name.getName() + i + "" + j);
                        constantList.addConstant(
                                expressionIdent, list.get(i).get(j), TypeDouble.getInstance()
                        );
                }
        }
  }

// Global variable declaration
  static final public 
Declaration GlobalDecl() throws ParseException, PrismLangException {Declaration decl = null;
    jj_consume_token(GLOBAL);
    decl = Declaration();
{if ("" != null) return decl;}
    throw new Error("Missing return statement in function");
}

// Variable declaration
  static final public 
Declaration Declaration() throws ParseException, PrismLangException {Declaration decl;
        String name = null;
        DeclarationType declType;
        Expression init = null;
        Token begin = null;
begin = getToken(1);
    name = Identifier();
    jj_consume_token(COLON);
    declType = DeclarationVarType();
decl = new Declaration(name, declType);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INIT:{
      jj_consume_token(INIT);
      init = Expression(false, false);
decl.setStart(init);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
decl.setPosition(begin, getToken(0)); {if ("" != null) return decl;}
    throw new Error("Missing return statement in function");
}

// Type part of a declaration
  static final public 
DeclarationType DeclarationVarType() throws ParseException, PrismLangException {Expression low = null, high = null;
        DeclarationType declType, subtype;
        Token begin = null;
begin = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      low = Expression(false, false);
      jj_consume_token(DOTS);
      high = Expression(false, false);
      jj_consume_token(RBRACKET);
declType = new DeclarationInt(low, high);
      break;
      }
    case INT:{
      jj_consume_token(INT);
declType = new DeclarationIntUnbounded();
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
declType = new DeclarationBool();
      break;
      }
    case CLOCK:{
      jj_consume_token(CLOCK);
declType = new DeclarationClock();
      break;
      }
    case UNCERTAIN:{
      jj_consume_token(UNCERTAIN);
declType = new DeclarationIntUnbounded();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
declType.setPosition(begin, getToken(0)); {if ("" != null) return declType;}
    throw new Error("Missing return statement in function");
}

  static final public void ArrayDeclaration(parser.ast.Module module) throws ParseException, PrismLangException {String identifier;
        DeclarationType declarationType;
        int i = 0;
        int j = 0;
        int k = 0;
        Expression lowerLimit;
        Expression upperLimit;
        Token token;
        List<List<Expression>> values = new ArrayList<List<Expression>>();
        Expression value;
        Declaration declaration;
        boolean unidimensionalArray = true;
    jj_consume_token(INT);
    identifier = Identifier();
    jj_consume_token(LBRACKET);
    token = jj_consume_token(REG_INT);
i = Integer.parseInt(token.image); lineLengths.put(identifier, i);
    jj_consume_token(RBRACKET);
initializeList(values, 1, i);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      token = jj_consume_token(REG_INT);
j = Integer.parseInt(token.image); lineLengths.put(identifier, j);
      jj_consume_token(RBRACKET);
initializeList(values, i, j); unidimensionalArray = !unidimensionalArray;
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    jj_consume_token(LBRACKET);
    lowerLimit = Expression(false, false);
    jj_consume_token(DOTS);
    upperLimit = Expression(false, false);
    jj_consume_token(RBRACKET);
declarationType = new DeclarationInt(lowerLimit, upperLimit);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        value = Expression(false, false);
values.get(0).add(value);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          value = Expression(false, false);
values.get(0).add(value);
        }
        break;
        }
      case LBRACE:{
        jj_consume_token(LBRACE);
        value = Expression(false, false);
values.get(k).add(value);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          value = Expression(false, false);
values.get(k).add(value);
        }
        jj_consume_token(RBRACE);
k++;
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          jj_consume_token(LBRACE);
          value = Expression(false, false);
values.get(k).add(value);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            value = Expression(false, false);
values.get(k).add(value);
          }
          jj_consume_token(RBRACE);
k++;
        }
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
if (unidimensionalArray) {
                        verifyArray(values.get(0), i);
                } else {
                        verifyMatrix(values, i, j);
                }

                addArrayToModule(module, identifier, values, declarationType, unidimensionalArray);
    jj_consume_token(SEMICOLON);
}

  static void addArrayToModule(parser.ast.Module module, String identifier, List<List<Expression>> values, DeclarationType declarationType, boolean unidimensionalArray) throws ParseException {Declaration declaration;

        for (int i = 0; i < values.size(); i++) {
                for (int j = 0; j < values.get(i).size(); j++) {
                        declaration =
                                unidimensionalArray ? new Declaration(identifier + j, declarationType) : new Declaration(identifier + i + "" + j, declarationType) ;

                        if ( !values.isEmpty() ) {
                                declaration.setStart(values.get(i).get(j));
                        } else {
                                declaration.setStart(ZERO.clone().deepCopy());
                        }

                        module.addDeclaration(declaration);
                }
        }
  }

  static void verifyArray(List<Expression> values, int size) throws ParseException, PrismLangException {if (!values.isEmpty() && values.size() != size) {
                throw new PrismLangException(
                        String.format("Expected %d values for an array of size %d, but only %d values were provided", size, size, values.size())
                );
        }
  }

  static void verifyMatrix(List<List<Expression>> values, int listCount, int elementsPerList) throws ParseException, PrismLangException {if (!values.isEmpty() && values.size() != listCount) {
                throw new PrismLangException(
                        String.format("Expected %d subarrays but got %d", listCount, values.size())
                );
        }

        for (int i = 0; i < values.size(); i++) {
                List<Expression> sublist = values.get(i);
                if (sublist.size() != elementsPerList) {
                        throw new PrismLangException(
                                String.format("Subarray at index %d should have %d elements, but has %d", i, elementsPerList, sublist.size())
                        );
                }
        }
  }

  static void initializeList(List<List<Expression>> list, int listCount, int elementsPerList) throws ParseException {list.clear();

        for (int i = 0; i < listCount; i++) {
                list.add(i, new ArrayList<Expression>(elementsPerList));
        }
  }

// Module
  static final public 
parser.ast.Module Module() throws ParseException, PrismLangException {ExpressionIdent name = null;
        Declaration var = null;
        Expression invar;
        CommandWithArrays comm = null;
        parser.ast.Module module = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = IdentifierExpression();
module = new parser.ast.Module(name.getName());
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REG_IDENT:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_IDENT:{
        var = Declaration();
module.addDeclaration(var);
        break;
        }
      case INT:{
        ArrayDeclaration(module);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INVARIANT:{
      jj_consume_token(INVARIANT);
      invar = Expression(false, false);
      jj_consume_token(ENDINVARIANT);
module.setInvariant(invar);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_16;
      }
      comm = Command();
module.addCommand(comm);
    }
    jj_consume_token(ENDMODULE);
module.setPosition(begin, getToken(0)); module.setNameASTElement(name); {if ("" != null) return module;}
    throw new Error("Missing return statement in function");
}

// Command
  static final public 
CommandWithArrays Command() throws ParseException, PrismLangException {List<String> synchs = null;
        Expression guard = null;
        Updates updates = null;
        CommandWithArrays comm = new CommandWithArrays();
        Token begin = null;
    // Synchronisation action-label
            begin = jj_consume_token(LBRACKET);
    synchs = ActionList();
comm.setSynchs(synchs);
    jj_consume_token(RBRACKET);
    guard = Expression(false, false);
comm.setGuard(guard);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RARROW:{
      jj_consume_token(RARROW);
      updates = Updates();
      break;
      }
    case URARROW:{
      jj_consume_token(URARROW);
      updates = UncertainUpdates();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
comm.setUpdates(updates);
    jj_consume_token(SEMICOLON);
comm.setPosition(begin, getToken(0)); {if ("" != null) return comm;}
    throw new Error("Missing return statement in function");
}

// Uncertain Updates
  static final public UncertainUpdates UncertainUpdates() throws ParseException, PrismLangException {Expression uncertain;
    Update update;
    UncertainUpdates updates = new UncertainUpdates();
    int i = 0;
    uncertain = UncertainExpression();
    jj_consume_token(COLON);
    update = Update();
updates.addUpdate(uncertain, update);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_17;
      }
      jj_consume_token(PLUS);
      uncertain = UncertainExpression();
      jj_consume_token(COLON);
      update = Update();
updates.addUpdate(uncertain, update);
    }
updates.initializeConstraintSystem();
    jj_consume_token(LBRACE);
    updates = Equation(updates, i);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_18;
      }
i++;
      jj_consume_token(COMMA);
      updates = Equation(updates, i);
    }
    jj_consume_token(RBRACE);
{if ("" != null) return updates;}
    throw new Error("Missing return statement in function");
}

  static final public UncertainUpdates Equation(UncertainUpdates updates, int i) throws ParseException, PrismLangException {Expression ZERO = new ExpressionLiteral(TypeDouble.getInstance(), 0.0);
        Token relationSymbol;
    UncertainEquationTerm(updates, i, true);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_19;
      }
      jj_consume_token(PLUS);
      UncertainEquationTerm(updates, i, true);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LE:{
      relationSymbol = jj_consume_token(LE);
      break;
      }
    case GE:{
      relationSymbol = jj_consume_token(GE);
      break;
      }
    case EQ:{
      relationSymbol = jj_consume_token(EQ);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
updates.setRelationSymbol(relationSymbol.image);
    UncertainEquationTerm(updates, i, false);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_20;
      }
      jj_consume_token(PLUS);
      UncertainEquationTerm(updates, i, false);
    }
updates.addConstant(ZERO, i, false) ; {if ("" != null) return updates;}
    throw new Error("Missing return statement in function");
}

// A basic rule for the terms of an inequation in uncertains 
  static final public void UncertainEquationTerm(UncertainUpdates updates, int i, boolean isInLeftSide) throws ParseException, PrismLangException {Expression ZERO = new ExpressionLiteral(TypeDouble.getInstance(), 0.0);
        Expression ONE  = new ExpressionLiteral(TypeDouble.getInstance(), 1.0);

        UncertainExpression uncertainExpression = null;
        Expression coefficient = ONE;
        Expression constant    = null;
  Token minus = null;
    if (jj_2_5(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        minus = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      uncertainExpression = UncertainExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
        coefficient = ConstantExpression();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
if (Objects.nonNull(minus)) {
                                        coefficient = new ExpressionUnaryOp(ExpressionUnaryOp.MINUS, coefficient);
                                }

                                updates.addCoefficient(coefficient, i, uncertainExpression, isInLeftSide);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAX:
      case MIN:
      case LPARENTH:
      case MINUS:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:{
        constant = ConstantExpression();
updates.addConstant(constant, i, isInLeftSide);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public Expression ConstantExpression() throws ParseException, PrismLangException {Expression constantTerm = null;
        Expression result       = null;
    constantTerm = ConstantTerm();
    result = ConstantExpression_(constantTerm);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ConstantExpression_(Expression left) throws ParseException, PrismLangException {Expression right  = null;
        Expression result = left;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      right = ConstantTerm();
result = new ExpressionBinaryOp(ExpressionBinaryOp.PLUS,  left, right);
      result = ConstantExpression_(result);
{if ("" != null) return result;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      right = ConstantTerm();
result = new ExpressionBinaryOp(ExpressionBinaryOp.MINUS, left, right);
      result = ConstantExpression_(result);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[52] = jj_gen;
{if ("" != null) return result;}
    }
    throw new Error("Missing return statement in function");
}

  static final public Expression ConstantTerm() throws ParseException, PrismLangException {Expression constantFactor = null;
        Expression result         = null;
    constantFactor = ConstantFactor();
    result = ConstantTerm_(constantFactor);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ConstantTerm_(Expression left) throws ParseException, PrismLangException {Expression right  = null;
        Expression result = left;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMES:{
      jj_consume_token(TIMES);
      right = ConstantFactor();
result = new ExpressionBinaryOp(ExpressionBinaryOp.TIMES, left, right);
      result = ConstantTerm_(result);
{if ("" != null) return result;}
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      right = ConstantFactor();
result = new ExpressionBinaryOp(ExpressionBinaryOp.DIVIDE, left, right);
      result = ConstantTerm_(result);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[53] = jj_gen;
{if ("" != null) return result;}
    }
    throw new Error("Missing return statement in function");
}

  static final public Expression ConstantFactor() throws ParseException, PrismLangException {Expression result = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      result = ConstantFactor();
result = new ExpressionUnaryOp(ExpressionUnaryOp.MINUS, result); {if ("" != null) return result;}
      break;
      }
    case MAX:
    case MIN:
    case LPARENTH:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENT:{
      result = Basic();
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Expression Basic() throws ParseException, PrismLangException {String identifier = null;
        Expression i      = null;
        Expression j      = null;
        Expression expression = null;
        Token token           = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_DOUBLE:{
      token = jj_consume_token(REG_DOUBLE);
expression = new ExpressionLiteral(TypeDouble.getInstance(), Double.parseDouble(token.image));
      break;
      }
    case REG_INT:{
      token = jj_consume_token(REG_INT);
expression = new ExpressionLiteral(TypeDouble.getInstance(), Double.parseDouble(token.image));
      break;
      }
    case REG_IDENT:{
      identifier = Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        i = Expression(false, false);
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          j = Expression(false, false);
          jj_consume_token(RBRACKET);
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
if (Objects.nonNull(i) && Objects.nonNull(j)) {
                                                expression = new ExpressionArrayIndex(identifier, i, j, lineLengths.get(identifier));
                                        } else if (Objects.nonNull(i)) {
                                                expression = new ExpressionArrayIndex(identifier, ZERO.clone().deepCopy(), i, lineLengths.get(identifier));
                                        } else {
                                                expression = new ExpressionIdent(identifier);
                                        }
      break;
      }
    case MAX:
    case MIN:{
      expression = MinMaxFunction();
      break;
      }
    case LPARENTH:{
      jj_consume_token(LPARENTH);
      expression = ConstantExpression();
expression = new ExpressionUnaryOp(ExpressionUnaryOp.PARENTH, expression);
      jj_consume_token(RPARENTH);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  static final public Expression MinMaxFunction() throws ParseException, PrismLangException {ExpressionMinMax expressionMinMax = new ExpressionMinMax();
        Expression left  = null;
        Expression right = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIN:{
      jj_consume_token(MIN);
expressionMinMax.setFunction(ExpressionMinMax.MIN);
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
expressionMinMax.setFunction(ExpressionMinMax.MAX);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENTH);
    left = ConstantExpression();
expressionMinMax.setLeft(left);
    jj_consume_token(COMMA);
    right = ConstantExpression();
expressionMinMax.setRight(right);
    jj_consume_token(RPARENTH);
{if ("" != null) return expressionMinMax;}
    throw new Error("Missing return statement in function");
}

// Updates
  static final public 
Updates Updates() throws ParseException, PrismLangException {Expression prob;
        Update update;
        Updates updates = new Updates();
        Token begin = null;
begin = getToken(1);
    if (jj_2_6(2147483647)) {
      update = Update();
updates.addUpdate(null, update);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case LBRACKET:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        prob = ProbOrRateOrInterval();
        jj_consume_token(COLON);
        update = Update();
updates.addUpdate(prob, update);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
            ;
            break;
            }
          default:
            jj_la1[59] = jj_gen;
            break label_21;
          }
          jj_consume_token(PLUS);
          prob = ProbOrRateOrInterval();
          jj_consume_token(COLON);
          update = Update();
updates.addUpdate(prob, update);
        }
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
updates.setPosition(begin, getToken(0)); {if ("" != null) return updates;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ProbOrRateOrInterval() throws ParseException, PrismLangException {Expression prob;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A:
    case E:
    case FALSE:
    case FILTER:
    case FUNC:
    case F:
    case G:
    case MAX:
    case MIN:
    case X:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case NOT:
    case LPARENTH:
    case DLBRACKET:
    case DLT:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENTPRIME:
    case REG_IDENT:{
      prob = Expression(false, false);
      break;
      }
    case LBRACKET:{
      prob = ExpressionInterval(false, false);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return prob;}
    throw new Error("Missing return statement in function");
}

  static final public Update Update() throws ParseException, PrismLangException {Update update = new Update();
        Token begin = null;
begin = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPARENTH:{
      UpdateElement(update);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          break label_22;
        }
        jj_consume_token(AND);
        UpdateElement(update);
      }
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
update.setPosition(begin, getToken(0)); {if ("" != null) return update;}
    throw new Error("Missing return statement in function");
}

  static final public void UpdateElement(Update update) throws ParseException, PrismLangException {ExpressionIdent var = null;
        Expression expr = null;
        Token begin = null;
    begin = jj_consume_token(LPARENTH);
    var = IdentifierPrime();
    jj_consume_token(EQ);
    expr = Expression(false, false);
    jj_consume_token(RPARENTH);
UpdateElement ue = new UpdateElement(var, expr); ue.setPosition(begin, getToken(0)); update.addElement(ue);
}

// Module renaming
  static final public 
RenamedModule RenamedModule() throws ParseException, PrismLangException {ExpressionIdent name = null, base = null;
        RenamedModule rm = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = IdentifierExpression();
    jj_consume_token(EQ);
    base = IdentifierExpression();
rm = new RenamedModule(name.getName(), base.getName());
    jj_consume_token(LBRACKET);
    Rename(rm);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      Rename(rm);
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(ENDMODULE);
rm.setPosition(begin, getToken(0)); rm.setNameASTElement(name); rm.setBaseModuleASTElement(base); {if ("" != null) return rm;}
    throw new Error("Missing return statement in function");
}

  static final public void Rename(RenamedModule rm) throws ParseException {ExpressionIdent id1 = null, id2 = null;
    // NB: have to explicitly include keywords for functions because they can be renamed
            id1 = IdentifierExpressionMinMax();
    jj_consume_token(EQ);
    id2 = IdentifierExpressionMinMax();
rm.addRename(id1.getName(), id2.getName(), id1, id2);
}

// Reward structure
  static final public 
RewardStructWithArrays RewardStruct() throws ParseException, PrismLangException {String name = null, s = null;
        Expression guard = null, value = null;
        RewardStructWithArrays rs = new RewardStructWithArrays();
        RewardStructItem rsi;
        Token begin = null, begin2 = null;
        List<String> synchs = null;
    begin = jj_consume_token(REWARDS);
    if (jj_2_7(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
rs.setName(name);
    } else {
      ;
    }
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case LBRACKET:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_24;
      }
begin2 = getToken(1); synchs = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        synchs = ActionList();
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      guard = Expression(false, false);
      jj_consume_token(COLON);
      value = Expression(false, false);
      jj_consume_token(SEMICOLON);
rsi = new RewardStructItem(synchs, guard, value); rsi.setPosition(begin2, getToken(0)); rs.addItem(rsi);
    }
    jj_consume_token(ENDREWARDS);
rs.setPosition(begin, getToken(0)); {if ("" != null) return rs;}
    throw new Error("Missing return statement in function");
}

// Action list (0 or more comma-separated identifiers)
  static final public 
List<String> ActionList() throws ParseException {String s;
        List<String> list = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_IDENT:{
      s = Identifier();
list.add(s);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        s = Identifier();
list.add(s);
      }
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

// Initial states ("init...endinit" construct)
  static final public 
Expression Init() throws ParseException, PrismLangException {Expression expr = null;
    jj_consume_token(INIT);
    expr = Expression(false, false);
    jj_consume_token(ENDINIT);
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

// Observable variables list (for partially observable models)
  static final public 
ObservableVars ObservableVars() throws ParseException {Token begin = null;
        ObservableVars obsVars = null;
        Expression exprVar = null;
begin = getToken(1);
    jj_consume_token(OBSERVABLES);
obsVars = new ObservableVars();
    exprVar = IdentifierExpression();
obsVars.addVar(exprVar);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      exprVar = IdentifierExpression();
obsVars.addVar(exprVar);
    }
    jj_consume_token(ENDOBSERVABLES);
obsVars.setPosition(begin, getToken(0)); {if ("" != null) return obsVars;}
    throw new Error("Missing return statement in function");
}

// Individual observable (for partially observable models)
  static final public 
Observable Observable() throws ParseException, PrismLangException {Token begin = null;
        String name = null;
        Expression defn = null;
begin = getToken(1);
    jj_consume_token(OBSERVABLE);
    jj_consume_token(DQUOTE);
    name = Identifier();
    jj_consume_token(DQUOTE);
    jj_consume_token(EQ);
    defn = Expression(false, false);
    jj_consume_token(SEMICOLON);
Observable obs = new Observable(name, defn); obs.setPosition(begin, getToken(0)); {if ("" != null) return obs;}
    throw new Error("Missing return statement in function");
}

// System definition ("system...endsystem" construct)
  static final public 
void SystemEndsystem(ModulesFile mf) throws ParseException {String name = null;
        SystemDefn sysdef;
    jj_consume_token(SYSTEM);
    if (jj_2_8(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
    } else {
      ;
    }
    sysdef = SystemDefn();
    jj_consume_token(ENDSYSTEM);
mf.addSystemDefn(sysdef, name);
}

// System definition component
  static final public 
SystemDefn SystemDefn() throws ParseException {SystemDefn ret;
    ret = SystemFullParallel();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// System definition component (full parallel)
  static final public 
SystemDefn SystemFullParallel() throws ParseException {SystemDefn sys1 = null, sys2 = null;
        SystemFullParallel par = null;
        Token begin;
begin = getToken(1);
    sys1 = SystemInterleaved();
par = new SystemFullParallel(); par.addOperand(sys1);
    label_27:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemParallel();
par.addOperand(sys2);
    }
if (par==null || par.getNumOperands() == 1) {
                        {if ("" != null) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if ("" != null) return par;}
                }
    throw new Error("Missing return statement in function");
}

// System definition component (interleaved parallel)
  static final public 
SystemDefn SystemInterleaved() throws ParseException {SystemDefn sys1 = null, sys2 = null;
        SystemInterleaved par = null;
        Token begin;
begin = getToken(1);
    sys1 = SystemParallel();
par = new SystemInterleaved(); par.addOperand(sys1);
    label_28:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_28;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemFullParallel();
par.addOperand(sys2);
    }
if (par==null || par.getNumOperands() == 1) {
                        {if ("" != null) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if ("" != null) return par;}
                }
    throw new Error("Missing return statement in function");
}

// System definition component (parallel over set of actions)
  static final public 
SystemDefn SystemParallel() throws ParseException {SystemDefn sys1 = null, sys2 = null;
        SystemParallel par = null;
        String s;
        Token begin;
begin = getToken(1);
    sys1 = SystemHideRename();
    if (jj_2_11(2147483647)) {
par = new SystemParallel(); par.setOperand1(sys1);
      jj_consume_token(OR);
      jj_consume_token(LBRACKET);
      s = Identifier();
par.addAction(s);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          break label_29;
        }
        jj_consume_token(COMMA);
        s = Identifier();
par.addAction(s);
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(OR);
      sys2 = SystemHideRename();
par.setOperand2(sys2);
    } else {
      ;
    }
if (par==null) {
                        {if ("" != null) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if ("" != null) return par;}
                }
    throw new Error("Missing return statement in function");
}

// System definition component (hiding and renaming)
  static final public 
SystemDefn SystemHideRename() throws ParseException {SystemDefn sys = null;
        SystemHide hide = null;
        SystemRename rename = null;
        String s1 = null, s2 = null;
        Token begin;
begin = getToken(1);
    sys = SystemAtomic();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIVIDE:{
hide = new SystemHide(sys);
        jj_consume_token(DIVIDE);
        jj_consume_token(LBRACE);
        s1 = Identifier();
hide.addAction(s1);
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[72] = jj_gen;
            break label_31;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
hide.addAction(s1);
        }
        jj_consume_token(RBRACE);
sys = hide;
        break;
        }
      case LBRACE:{
rename = new SystemRename(sys);
        jj_consume_token(LBRACE);
        s1 = Identifier();
        jj_consume_token(RENAME);
        s2 = Identifier();
rename.addRename(s1, s2);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[73] = jj_gen;
            break label_32;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
          jj_consume_token(RENAME);
          s2 = Identifier();
rename.addRename(s1, s2);
        }
        jj_consume_token(RBRACE);
sys = rename;
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
sys.setPosition(begin, getToken(0)); {if ("" != null) return sys;}
    throw new Error("Missing return statement in function");
}

// System definition component (bottom level)
  static final public 
SystemDefn SystemAtomic() throws ParseException {String name = null;
        SystemDefn sys = null;
        Token begin;
begin = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_IDENT:{
      name = Identifier();
sys = new SystemModule(name);
      break;
      }
    case DQUOTE:{
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
sys = new SystemReference(name);
      break;
      }
    case LPARENTH:{
      jj_consume_token(LPARENTH);
      sys = SystemDefn();
      jj_consume_token(RPARENTH);
sys = new SystemBrackets(sys);
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sys.setPosition(begin, getToken(0)); {if ("" != null) return sys;}
    throw new Error("Missing return statement in function");
}

// Player definition
  static final public 
Player Player() throws ParseException {String name = null;
        Player player = null;
        Token begin;
begin = getToken(1);
    jj_consume_token(PLAYER);
    name = Identifier();
player = new Player(name);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:
    case REG_IDENT:{
      PlayerItem(player);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          break label_33;
        }
        jj_consume_token(COMMA);
        PlayerItem(player);
      }
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(ENDPLAYER);
player.setPosition(begin, getToken(0)); {if ("" != null) return player;}
    throw new Error("Missing return statement in function");
}

// Player definition item (module or [action])
  static final public 
void PlayerItem(Player player) throws ParseException {String name = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      name = Identifier();
      jj_consume_token(RBRACKET);
player.addAction(name);
      break;
      }
    case REG_IDENT:{
      name = Identifier();
player.addModule(name);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//-----------------------------------------------------------------------------------
// Expressions.
// This includes PRISM properties (if the "prop" parameter is true)
// and (within this) path formulas (if the "pathprop" parameter is true).
// Which allows us to use the same productions for the grammars for
// all three cases (they are very similar).
//-----------------------------------------------------------------------------------

// Expression
  static final public 
Expression Expression(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret;
    ret = ExpressionTemporalBinary(prop, pathprop);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: temporal operators, binary (U, W, R) and unary (X, F, G)

// Note: the potential occurrence of two successive (unseparated) expressions
// (e.g. "a" and "b" in "F<=a b") is a grammar flaw because the function and
// minus operators can cause ambiguities, for example:
// "F<=a(b)+c(d)" = "F<=a" "(b)+c(d)" = "F<=a(b)+c" "(d)" ?
// "F<=-a-b-c" = "F<=-a" "-b-c" = "F<=-a-b" "-c" ?
// In many cases, these could be distinguished by type checking but
// that does not really help since this is done post-parsing.
// To prevent (very common) cases such as "F<=t (b)", "F<=t (b)&(c)", etc.
// being mis-parsed ("t(b)" would always be taken over "t"), we catch this case
// separately (see TimeBound() production below for details).
// This means that more complex time-bounds, especially those that
// start/end with an identifier should be parenthesised, e.g. "F<=(t1+t2)".

// In fact, JavaCC also warns about lookahead for this function.
// This is because (like unary minus), R can appear on the left of a unary
// operator (reward R operator) or in the middle of a binary operator (release).
  static final public 
Expression ExpressionTemporalBinary(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        ExpressionTemporal exprTemp;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionTemporalUnary(prop, pathprop);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case R:
    case U:
    case W:{
if (!pathprop) {if (true) throw generateParseException();}
exprTemp = new ExpressionTemporal(); exprTemp.setOperand1(ret);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case U:{
        jj_consume_token(U);
exprTemp.setOperator(ExpressionTemporal.P_U);
        break;
        }
      case W:{
        jj_consume_token(W);
exprTemp.setOperator(ExpressionTemporal.P_W);
        break;
        }
      case R:{
        jj_consume_token(R);
exprTemp.setOperator(ExpressionTemporal.P_R);
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:
      case EQ:
      case LT:
      case GT:
      case LE:
      case GE:{
        TimeBound(exprTemp);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      expr = ExpressionTemporalUnary(prop, pathprop);
exprTemp.setOperand2(expr); exprTemp.setPosition(begin, getToken(0)); ret = exprTemp;
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExpressionTemporalUnary(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        ExpressionTemporal exprTemp;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case F:
    case G:
    case X:{
if (!pathprop) {if (true) throw generateParseException();}
begin = getToken(1); exprTemp = new ExpressionTemporal();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case X:{
        jj_consume_token(X);
exprTemp.setOperator(ExpressionTemporal.P_X);
        break;
        }
      case F:{
        jj_consume_token(F);
exprTemp.setOperator(ExpressionTemporal.P_F);
        break;
        }
      case G:{
        jj_consume_token(G);
exprTemp.setOperator(ExpressionTemporal.P_G);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:
      case EQ:
      case LT:
      case GT:
      case LE:
      case GE:{
        TimeBound(exprTemp);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      expr = ExpressionTemporalUnary(prop, pathprop);
exprTemp.setOperand2(expr); exprTemp.setPosition(begin, getToken(0)); ret = exprTemp;
      break;
      }
    case A:
    case E:
    case FALSE:
    case FILTER:
    case FUNC:
    case MAX:
    case MIN:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case NOT:
    case LPARENTH:
    case DLBRACKET:
    case DLT:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENTPRIME:
    case REG_IDENT:{
      ret = ExpressionITE(prop, pathprop);
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Time bound for temporal operators
// (see ExpressionTemporal production for lookahead explanation)
  static final public 
void TimeBound(ExpressionTemporal exprTemp) throws ParseException, PrismLangException {Expression lBound, uBound;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LE:{
      jj_consume_token(LE);
      if (jj_2_12(2147483647)) {
        uBound = IdentifierExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case E:
        case FALSE:
        case FILTER:
        case FUNC:
        case F:
        case G:
        case MAX:
        case MIN:
        case X:
        case PMAXMAX:
        case PMAXMIN:
        case PMAX:
        case PMINMAX:
        case PMINMIN:
        case PMIN:
        case P:
        case RMAXMAX:
        case RMAXMIN:
        case RMAX:
        case RMINMAX:
        case RMINMIN:
        case RMIN:
        case R:
        case S:
        case TRUE:
        case NOT:
        case LPARENTH:
        case DLBRACKET:
        case DLT:
        case MINUS:
        case DQUOTE:
        case REG_INT:
        case REG_DOUBLE:
        case REG_IDENTPRIME:
        case REG_IDENT:{
          uBound = Expression(false, false);
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
exprTemp.setUpperBound(uBound, false);
      break;
      }
    case LT:{
      jj_consume_token(LT);
      if (jj_2_13(2147483647)) {
        uBound = IdentifierExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case E:
        case FALSE:
        case FILTER:
        case FUNC:
        case F:
        case G:
        case MAX:
        case MIN:
        case X:
        case PMAXMAX:
        case PMAXMIN:
        case PMAX:
        case PMINMAX:
        case PMINMIN:
        case PMIN:
        case P:
        case RMAXMAX:
        case RMAXMIN:
        case RMAX:
        case RMINMAX:
        case RMINMIN:
        case RMIN:
        case R:
        case S:
        case TRUE:
        case NOT:
        case LPARENTH:
        case DLBRACKET:
        case DLT:
        case MINUS:
        case DQUOTE:
        case REG_INT:
        case REG_DOUBLE:
        case REG_IDENTPRIME:
        case REG_IDENT:{
          uBound = Expression(false, false);
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
exprTemp.setUpperBound(uBound, true);
      break;
      }
    case GE:{
      jj_consume_token(GE);
      if (jj_2_14(2147483647)) {
        lBound = IdentifierExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case E:
        case FALSE:
        case FILTER:
        case FUNC:
        case F:
        case G:
        case MAX:
        case MIN:
        case X:
        case PMAXMAX:
        case PMAXMIN:
        case PMAX:
        case PMINMAX:
        case PMINMIN:
        case PMIN:
        case P:
        case RMAXMAX:
        case RMAXMIN:
        case RMAX:
        case RMINMAX:
        case RMINMIN:
        case RMIN:
        case R:
        case S:
        case TRUE:
        case NOT:
        case LPARENTH:
        case DLBRACKET:
        case DLT:
        case MINUS:
        case DQUOTE:
        case REG_INT:
        case REG_DOUBLE:
        case REG_IDENTPRIME:
        case REG_IDENT:{
          lBound = Expression(false, false);
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
exprTemp.setLowerBound(lBound, false);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      if (jj_2_15(2147483647)) {
        lBound = IdentifierExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case E:
        case FALSE:
        case FILTER:
        case FUNC:
        case F:
        case G:
        case MAX:
        case MIN:
        case X:
        case PMAXMAX:
        case PMAXMIN:
        case PMAX:
        case PMINMAX:
        case PMINMIN:
        case PMIN:
        case P:
        case RMAXMAX:
        case RMAXMIN:
        case RMAX:
        case RMINMAX:
        case RMINMIN:
        case RMIN:
        case R:
        case S:
        case TRUE:
        case NOT:
        case LPARENTH:
        case DLBRACKET:
        case DLT:
        case MINUS:
        case DQUOTE:
        case REG_INT:
        case REG_DOUBLE:
        case REG_IDENTPRIME:
        case REG_IDENT:{
          lBound = Expression(false, false);
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
exprTemp.setLowerBound(lBound, true);
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      lBound = Expression(false, false);
      jj_consume_token(COMMA);
      uBound = Expression(false, false);
      jj_consume_token(RBRACKET);
exprTemp.setLowerBound(lBound, false); exprTemp.setUpperBound(uBound, false);
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      lBound = Expression(false, false);
exprTemp.setEqualBounds(lBound);
      break;
      }
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Expression: if-then-else, i.e. "cond ? then : else"
  static final public 
Expression ExpressionITE(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, left, right;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionImplies(prop, pathprop);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QMARK:{
      jj_consume_token(QMARK);
      left = ExpressionImplies(prop, pathprop);
      jj_consume_token(COLON);
      right = ExpressionITE(prop, pathprop);
ret = new ExpressionITE(ret, left, right); ret.setPosition(begin, getToken(0));
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: implies
  static final public 
Expression ExpressionImplies(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionIff(prop, pathprop);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLIES:{
        ;
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        break label_34;
      }
      jj_consume_token(IMPLIES);
      expr = ExpressionIff(prop, pathprop);
ret = new ExpressionBinaryOp(ExpressionBinaryOp.IMPLIES, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: if-and-only-iff
  static final public 
Expression ExpressionIff(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionOr(prop, pathprop);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IFF:{
        ;
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        break label_35;
      }
      jj_consume_token(IFF);
      expr = ExpressionOr(prop, pathprop);
ret = new ExpressionBinaryOp(ExpressionBinaryOp.IFF, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: or
  static final public 
Expression ExpressionOr(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionAnd(prop, pathprop);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        break label_36;
      }
      jj_consume_token(OR);
      expr = ExpressionAnd(prop, pathprop);
ret = new ExpressionBinaryOp(ExpressionBinaryOp.OR, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: and
  static final public 
Expression ExpressionAnd(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionNot(prop, pathprop);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        break label_37;
      }
      jj_consume_token(AND);
      expr = ExpressionNot(prop, pathprop);
ret = new ExpressionBinaryOp(ExpressionBinaryOp.AND, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: not
  static final public 
Expression ExpressionNot(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      begin = jj_consume_token(NOT);
      expr = ExpressionNot(prop, pathprop);
ret = new ExpressionUnaryOp(ExpressionUnaryOp.NOT, expr); ret.setPosition(begin, getToken(0));
      break;
      }
    case A:
    case E:
    case FALSE:
    case FILTER:
    case FUNC:
    case MAX:
    case MIN:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case LPARENTH:
    case DLBRACKET:
    case DLT:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENTPRIME:
    case REG_IDENT:{
      ret = ExpressionEquality(prop, pathprop);
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: equality operators: =, !=
  static final public 
Expression ExpressionEquality(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        int op;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionRelop(prop, pathprop);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        break label_38;
      }
      op = EqNeq();
      expr = ExpressionRelop(prop, pathprop);
ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: relational operators: >, <, >=, <=
  static final public 
Expression ExpressionRelop(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        int op;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionPlusMinus(prop, pathprop);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        break label_39;
      }
      op = LtGt();
      expr = ExpressionPlusMinus(prop, pathprop);
ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: plus/minus

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "-a-b" = "(-a)-b" = "-a" "-b"
// Ignoring the warning results in the largest match being taken.
  static final public 
Expression ExpressionPlusMinus(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        int op;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionTimesDivide(prop, pathprop);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
op = ExpressionBinaryOp.PLUS;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
op = ExpressionBinaryOp.MINUS;
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionTimesDivide(prop, pathprop);
ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: times/divide
  static final public 
Expression ExpressionTimesDivide(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        int op;
        Token begin = null;
begin = getToken(1);
    ret = ExpressionUnaryMinus(prop, pathprop);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
op = ExpressionBinaryOp.TIMES;
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
op = ExpressionBinaryOp.DIVIDE;
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionUnaryMinus(prop, pathprop);
ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: unary minus
  static final public 
Expression ExpressionUnaryMinus(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret, expr;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      begin = jj_consume_token(MINUS);
      expr = ExpressionUnaryMinus(prop, pathprop);
ret = new ExpressionUnaryOp(ExpressionUnaryOp.MINUS, expr); ret.setPosition(begin, getToken(0));
      break;
      }
    case A:
    case E:
    case FALSE:
    case FILTER:
    case FUNC:
    case MAX:
    case MIN:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case LPARENTH:
    case DLBRACKET:
    case DLT:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENTPRIME:
    case REG_IDENT:{
      ret = ExpressionBasic(prop, pathprop);
      break;
      }
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Basic expression (top of operator precedence ordering)
  static final public 
Expression ExpressionBasic(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case TRUE:
    case REG_INT:
    case REG_DOUBLE:{
      ret = ExpressionLiteral(prop, pathprop);
      break;
      }
    case REG_IDENTPRIME:
    case REG_IDENT:{
      ret = ExpressionFuncOrIdentOrArrayIndexing(prop, pathprop);
      break;
      }
    case MAX:
    case MIN:{
      ret = ExpressionFuncMinMax(prop, pathprop);
      break;
      }
    case FUNC:{
      ret = ExpressionFuncOldStyle(prop, pathprop);
      break;
      }
    case LPARENTH:{
      ret = ExpressionParenth(prop, pathprop);
      break;
      }
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:{
      // Remaining options are only applicable for properties
                      ret = ExpressionProb(prop, pathprop);
      break;
      }
    case S:{
      ret = ExpressionSS(prop, pathprop);
      break;
      }
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:{
      ret = ExpressionReward(prop, pathprop);
      break;
      }
    case E:{
      ret = ExpressionExists(prop, pathprop);
      break;
      }
    case A:{
      ret = ExpressionForAll(prop, pathprop);
      break;
      }
    case DLBRACKET:
    case DLT:{
      ret = ExpressionStrategy(prop, pathprop);
      break;
      }
    case DQUOTE:{
      ret = ExpressionLabel(prop, pathprop);
      break;
      }
    case FILTER:{
      ret = ExpressionFilter(prop, pathprop);
      break;
      }
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: function or identifier

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "a(b)" = "a" "(b)"
// Ignoring the warning results in the largest match being taken.
  static final public 
Expression ExpressionFuncOrIdentOrArrayIndexing(boolean prop, boolean pathprop) throws ParseException, PrismLangException {String s = null;
        Expression ret = null;
        Token begin = null;
        ExpressionIdent p;
        Expression i;
        Expression j;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_IDENT:{
      s = Identifier();
ret = new ExpressionIdent(s); begin = getToken(0);
      break;
      }
    case REG_IDENTPRIME:{
      p = IdentifierPrime();
ret = p; ; begin = getToken(0);
      break;
      }
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPARENTH:
    case LBRACKET:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPARENTH:{
        jj_consume_token(LPARENTH);
ret = new ExpressionFunc(s);
        ExpressionFuncArgs(prop, pathprop, (ExpressionFunc)ret);
        jj_consume_token(RPARENTH);
        break;
        }
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        i = Expression(false, false);
ret = new ExpressionArrayIndex(s, ZERO.clone().deepCopy(), i, lineLengths.get(s));
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          j = Expression(false, false);
ret = new ExpressionArrayIndex(s, i, j, lineLengths.get(s));
          jj_consume_token(RBRACKET);
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[107] = jj_gen;
      ;
    }
ret.setPosition(begin, getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: min/max function (treated differently because min/max are keywords)
  static final public 
Expression ExpressionFuncMinMax(boolean prop, boolean pathprop) throws ParseException, PrismLangException {String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIN:{
      begin = jj_consume_token(MIN);
s = "min";
      break;
      }
    case MAX:{
      begin = jj_consume_token(MAX);
s = "max";
      break;
      }
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
func = new ExpressionFunc(s);
    jj_consume_token(LPARENTH);
    ExpressionFuncArgs(prop, pathprop, func);
    jj_consume_token(RPARENTH);
func.setPosition(begin, getToken(0)); {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

// Expression: old-style function, i.e. "func(name, ...)"
  static final public 
Expression ExpressionFuncOldStyle(boolean prop, boolean pathprop) throws ParseException, PrismLangException {String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    begin = jj_consume_token(FUNC);
    jj_consume_token(LPARENTH);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIN:{
      jj_consume_token(MIN);
s = "min";
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
s = "max";
      break;
      }
    case REG_IDENT:{
      s = Identifier();
      break;
      }
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
func = new ExpressionFunc(s); func.setOldStyle(true);
    ExpressionFuncArgs(prop, pathprop, func);
    jj_consume_token(RPARENTH);
func.setPosition(begin, getToken(0)); {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

// Arguments for a function in an expression
  static final public 
void ExpressionFuncArgs(boolean prop, boolean pathprop, ExpressionFunc func) throws ParseException, PrismLangException {Expression expr;
    expr = Expression(prop, pathprop);
func.addOperand(expr);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      expr = Expression(prop, pathprop);
func.addOperand(expr);
    }
}

// Expression: literal
  static final public 
Expression ExpressionLiteral(boolean prop, boolean pathprop) throws ParseException {Expression ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_INT:{
      jj_consume_token(REG_INT);
try {
                        int i = Integer.parseInt(getToken(0).image);
                        ret = new ExpressionLiteral(TypeInt.getInstance(), Integer.valueOf(i));
                } catch (NumberFormatException e) {
                        // Need to catch this because some matches for regexp REG_INT
                        // are not valid integers (e.g. too big).
                        ParseException ex = new ParseException("Invalid integer literal");
                        ex.currentToken = getToken(0);
                        {if (true) throw ex;}
                        // NB: can't call generateParseException() here; it crashes
                }
      break;
      }
    case REG_DOUBLE:{
      jj_consume_token(REG_DOUBLE);
try {
                        double d = Double.parseDouble(getToken(0).image);
                        ret = new ExpressionLiteral(TypeDouble.getInstance(), Double.valueOf(d), getToken(0).image);
                } catch (NumberFormatException e) {
                        // Need to catch this because some matches for regexp REG_DOUBLE
                        // may not be valid doubles.
                        ParseException ex = new ParseException("Invalid double literal");
                        // NB: can't call generateParseException() here; it crashes
                }
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
ret = new ExpressionLiteral(TypeBool.getInstance(), Boolean.valueOf(true));
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
ret = new ExpressionLiteral(TypeBool.getInstance(), Boolean.valueOf(false));
      break;
      }
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ret.setPosition(getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: parentheses
  static final public 
Expression ExpressionParenth(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression expr, ret;
        Token begin = null;
    begin = jj_consume_token(LPARENTH);
    expr = Expression(prop, pathprop);
    jj_consume_token(RPARENTH);
ret = new ExpressionUnaryOp(ExpressionUnaryOp.PARENTH, expr); ret.setPosition(begin, getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Expression: interval
  static final public 
Expression ExpressionInterval(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionInterval expr = null;
        Expression expr1 = null, expr2 = null;
        Token begin = null;
    begin = jj_consume_token(LBRACKET);
    expr1 = Expression(prop, pathprop);
    jj_consume_token(COMMA);
    expr2 = Expression(prop, pathprop);
    jj_consume_token(RBRACKET);
expr = new ExpressionInterval(expr1, expr2); expr.setPosition(begin, getToken(0)); {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

//-----------------------------------------------------------------------------------
// Property stuff
//-----------------------------------------------------------------------------------

// (Property) expression: probabilistic operator P
  static final public 
Expression ExpressionProb(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression prob = null;
        Expression expr;
        Filter filter = null;
        ExpressionProb ret = new ExpressionProb();
        Token begin = null;
        boolean isBool;
if (!prop) {if (true) throw generateParseException();}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case P:{
      begin = jj_consume_token(P);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPARENTH:{
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        r = LtGt();
        prob = Expression(false, false);
relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "="; isBool = false;
        break;
        }
      case MIN:{
        jj_consume_token(MIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "min="; isBool = false;
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MAX:{
        jj_consume_token(MAX);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "max="; isBool = false;
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MINMIN:{
        jj_consume_token(MINMIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
        break;
        }
      case MINMAX:{
        jj_consume_token(MINMAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
        break;
        }
      case MAXMIN:{
        jj_consume_token(MAXMIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
        break;
        }
      case MAXMAX:{
        jj_consume_token(MAXMAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case PMIN:{
      begin = jj_consume_token(PMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "min="; isBool = false;
      break;
      }
    case PMAX:{
      begin = jj_consume_token(PMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "max="; isBool = false;
      break;
      }
    case PMINMIN:{
      begin = jj_consume_token(PMINMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
      break;
      }
    case PMINMAX:{
      begin = jj_consume_token(PMINMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
      break;
      }
    case PMAXMIN:{
      begin = jj_consume_token(PMAXMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
      break;
      }
    case PMAXMAX:{
      begin = jj_consume_token(PMAXMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
      break;
      }
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      filter = Filter();
      break;
      }
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if ("" != null) return ef;}
                }
                else {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Filter for a P/S/R operator
  static final public 
Filter Filter() throws ParseException, PrismLangException {Filter filter;
        Expression expr;
        Token begin = null;
    begin = jj_consume_token(LBRACE);
    expr = Expression(true, false);
filter = new Filter(expr);
    jj_consume_token(RBRACE);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        ;
        break;
        }
      default:
        jj_la1[118] = jj_gen;
        break label_43;
      }
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MIN:{
        jj_consume_token(MIN);
filter.setMinRequested(true);
        break;
        }
      case MAX:{
        jj_consume_token(MAX);
filter.setMaxRequested(true);
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
    }
filter.setPosition(begin, getToken(0)); {if ("" != null) return filter;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: steady-state operator S
  static final public 
Expression ExpressionSS(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression prob = null;
        Expression expr;
        Filter filter = null;
        ExpressionSS ret = new ExpressionSS();
        Token begin;
        boolean isBool;
if (!prop) {if (true) throw generateParseException();}
    // Various options for "S" keyword and attached symbols
            begin = jj_consume_token(S);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPARENTH:
    case LT:
    case GT:
    case LE:
    case GE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPARENTH:{
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      r = LtGt();
      prob = Expression(false, false);
relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "="; isBool = false;
      break;
      }
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = Expression(prop, pathprop);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      filter = Filter();
      break;
      }
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if ("" != null) return ef;}
                }
                else {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: expected reward operator R
  static final public 
Expression ExpressionReward(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression rew = null;
        Expression expr;
        Filter filter = null;
        ExpressionReward ret = new ExpressionReward();
        Token begin;
        boolean isBool;
if (!prop) {if (true) throw generateParseException();}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case R:{
      begin = jj_consume_token(R);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPARENTH:{
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        RewardIndex(ret);
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        r = LtGt();
        rew = Expression(false, false);
relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "="; isBool = false;
        break;
        }
      case MIN:{
        jj_consume_token(MIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "min="; isBool = false;
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
          break;
          }
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MAX:{
        jj_consume_token(MAX);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "max="; isBool = false;
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
          jj_consume_token(EQ);
          jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
          break;
          }
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MINMIN:{
        jj_consume_token(MINMIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
        break;
        }
      case MINMAX:{
        jj_consume_token(MINMAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
        break;
        }
      case MAXMIN:{
        jj_consume_token(MAXMIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
        break;
        }
      case MAXMAX:{
        jj_consume_token(MAXMAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case RMIN:{
      begin = jj_consume_token(RMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "min="; isBool = false;
      break;
      }
    case RMAX:{
      begin = jj_consume_token(RMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "max="; isBool = false;
      break;
      }
    case RMINMIN:{
      begin = jj_consume_token(RMINMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "minmin="; isBool = false;
      break;
      }
    case RMINMAX:{
      begin = jj_consume_token(RMINMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "minmax="; isBool = false;
      break;
      }
    case RMAXMIN:{
      begin = jj_consume_token(RMAXMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "maxmin="; isBool = false;
      break;
      }
    case RMAXMAX:{
      begin = jj_consume_token(RMAXMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
relOp = "maxmax="; isBool = false;
      break;
      }
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = ExpressionRewardContents(prop, pathprop);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      filter = Filter();
      break;
      }
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setReward(rew);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if ("" != null) return ef;}
                }
                else {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Reward struct index for R operator
  static final public 
void RewardIndex(ExpressionReward exprRew) throws ParseException, PrismLangException {Object index = null;
        Object indexDiv = null;
        Object discount = null;
    jj_consume_token(LBRACE);
    if (jj_2_16(2147483647)) {
      jj_consume_token(DQUOTE);
      index = Identifier();
      jj_consume_token(DQUOTE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISCOUNT:{
        jj_consume_token(DISCOUNT);
        jj_consume_token(EQ);
        discount = Expression(false, false);
        break;
        }
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        index = Expression(false, false);
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      jj_consume_token(DISCOUNT);
      jj_consume_token(EQ);
      discount = Expression(false,false);
      break;
      }
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      jj_consume_token(LBRACE);
      if (jj_2_17(2147483647)) {
        jj_consume_token(DQUOTE);
        indexDiv = Identifier();
        jj_consume_token(DQUOTE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case E:
        case FALSE:
        case FILTER:
        case FUNC:
        case F:
        case G:
        case MAX:
        case MIN:
        case X:
        case PMAXMAX:
        case PMAXMIN:
        case PMAX:
        case PMINMAX:
        case PMINMIN:
        case PMIN:
        case P:
        case RMAXMAX:
        case RMAXMIN:
        case RMAX:
        case RMINMAX:
        case RMINMIN:
        case RMIN:
        case R:
        case S:
        case TRUE:
        case NOT:
        case LPARENTH:
        case DLBRACKET:
        case DLT:
        case MINUS:
        case DQUOTE:
        case REG_INT:
        case REG_DOUBLE:
        case REG_IDENTPRIME:
        case REG_IDENT:{
          indexDiv = Expression(false, false);
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[133] = jj_gen;
      ;
    }
exprRew.setRewardStructIndex(index);
                if (indexDiv != null) {
                        exprRew.setRewardStructIndexDiv(indexDiv);
                }
                if (discount != null) {
                        exprRew.setDiscount(discount);
                }
}

// Contents of an R operator

// JavaCC warns about lookahead for this function. This is because there is a possible conflict between
// R [ S ], where "S" is the long-run reward operator, and R [ S [ ] ], where "S [ ]" is an LTL formula
// comprising a single atomic proposition. We use lookahead to resolve the ambiguity.
  static final public 
Expression ExpressionRewardContents(boolean prop, boolean pathprop) throws ParseException, PrismLangException {Expression expr = null;
        ExpressionTemporal exprTemp = null;
        Expression ret = null;
        Token begin;
begin = getToken(1);
    if (jj_2_18(2147483647)) {
      expr = ExpressionSS(prop, true);
ret = expr;
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S:{
        jj_consume_token(S);
ret = new ExpressionTemporal(ExpressionTemporal.R_S, null, null);
        break;
        }
      default:
        jj_la1[134] = jj_gen;
        if (jj_2_19(2147483647)) {
          begin = jj_consume_token(C);
          jj_consume_token(LE);
          expr = Expression(false, false);
exprTemp = new ExpressionTemporal(ExpressionTemporal.R_C, null, null); exprTemp.setUpperBound(expr); ret = exprTemp;
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case C:{
            jj_consume_token(C);
ret = new ExpressionTemporal(ExpressionTemporal.R_C, null, null);
            break;
            }
          case I:{
            jj_consume_token(I);
            jj_consume_token(EQ);
            expr = Expression(false, false);
exprTemp = new ExpressionTemporal(ExpressionTemporal.R_I, null, null); exprTemp.setUpperBound(expr); ret = exprTemp;
            break;
            }
          case Fc:{
            jj_consume_token(Fc);
            expr = Expression(prop, pathprop);
ret = new ExpressionTemporal(ExpressionTemporal.R_Fc, null, expr);
            break;
            }
          case F0:{
            jj_consume_token(F0);
            expr = Expression(prop, pathprop);
ret = new ExpressionTemporal(ExpressionTemporal.R_F0, null, expr);
            break;
            }
          case A:
          case E:
          case FALSE:
          case FILTER:
          case FUNC:
          case F:
          case G:
          case MAX:
          case MIN:
          case X:
          case PMAXMAX:
          case PMAXMIN:
          case PMAX:
          case PMINMAX:
          case PMINMIN:
          case PMIN:
          case P:
          case RMAXMAX:
          case RMAXMIN:
          case RMAX:
          case RMINMAX:
          case RMINMIN:
          case RMIN:
          case R:
          case S:
          case TRUE:
          case NOT:
          case LPARENTH:
          case DLBRACKET:
          case DLT:
          case MINUS:
          case DQUOTE:
          case REG_INT:
          case REG_DOUBLE:
          case REG_IDENTPRIME:
          case REG_IDENT:{
            expr = Expression(prop, true);
ret = expr;
            break;
            }
          default:
            jj_la1[135] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
ret.setPosition(begin, getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: n-player Nash operator
  static final public 
Expression ExpressionMultiNash(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionMultiNash ret = new ExpressionMultiNash();
        Expression bound = null;
        ArrayList<Expression> formulae = new ArrayList<Expression>();
        ExpressionQuant expr;
        String relOp = null;
        boolean isBool;
        int r;
        int n = 0;
if (!prop) {if (true) throw generateParseException();}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIN:{
      jj_consume_token(MIN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        r = LtGt();
        bound = Expression(false, false);
relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "min="; isBool = false;
        break;
        }
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        r = LtGt();
        bound = Expression(false, false);
relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
relOp = "max="; isBool = false;
        break;
        }
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENTH);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case P:{
      expr = ExpressionMultiNashProb(prop, true);
      break;
      }
    case R:{
      expr = ExpressionMultiNashReward(prop, true);
      break;
      }
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ret.addOperand(expr);
    label_44:
    while (true) {
      jj_consume_token(PLUS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case P:{
        expr = ExpressionMultiNashProb(prop, true);
        break;
        }
      case R:{
        expr = ExpressionMultiNashReward(prop, true);
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
ret.addOperand(expr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        break label_44;
      }
    }
    jj_consume_token(RPARENTH);
ret.setBound(bound);
                ret.setRelOp(relOp);
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: probabilistic operator (n-player Nash)
  static final public 
ExpressionQuant ExpressionMultiNashProb(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionMultiNashProb ret = new ExpressionMultiNashProb();
        Expression expr = null;
        Token begin;
if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(P);
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    jj_consume_token(RBRACKET);
ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: reward operator (n-player Nash)
  static final public 
ExpressionQuant ExpressionMultiNashReward(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionMultiNashReward ret = new ExpressionMultiNashReward();
        Expression expr = null;
        Token begin;
if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(R);
    MultiNashRewardIndexes(ret);
    jj_consume_token(LBRACKET);
    expr = ExpressionRewardContents(prop, pathprop);
    jj_consume_token(RBRACKET);
ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Reward) structure index for equilibria
  static final public 
void MultiNashRewardIndexes(ExpressionMultiNashReward exprMultiNash) throws ParseException, PrismLangException {Object index = null;
    jj_consume_token(LBRACE);
    if (jj_2_20(2147483647)) {
      jj_consume_token(DQUOTE);
      index = Identifier();
      jj_consume_token(DQUOTE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case E:
      case FALSE:
      case FILTER:
      case FUNC:
      case F:
      case G:
      case MAX:
      case MIN:
      case X:
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case DLBRACKET:
      case DLT:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENTPRIME:
      case REG_IDENT:{
        index = Expression(false, false);
        break;
        }
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
exprMultiNash.setRewardStructIndex(index);
}

// (Property) expression: CTL existential operator E
  static final public 
Expression ExpressionExists(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionExists ret = new ExpressionExists();
        Expression expr;
        Token begin = null;
if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(E);
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    jj_consume_token(RBRACKET);
ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: CTL universal operator A
  static final public 
Expression ExpressionForAll(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionForAll ret = new ExpressionForAll();
        Expression expr;
        Token begin = null;
if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(A);
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    jj_consume_token(RBRACKET);
ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: ATL strategy operators <<>> and [[]]
  static final public 
Expression ExpressionStrategy(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionStrategy ret;
        Expression expr;
        List<Coalition> coalitions;
        ArrayList<Expression> optionsSpec = null;
        Token begin = null;
if (!prop) {if (true) throw generateParseException();}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DLT:{
      begin = jj_consume_token(DLT);
ret = new ExpressionStrategy(true);
      coalitions = ExpressionStrategyCoalitionList();
      jj_consume_token(DGT);
      break;
      }
    case DLBRACKET:{
      begin = jj_consume_token(DLBRACKET);
ret = new ExpressionStrategy(false);
      coalitions = ExpressionStrategyCoalitionList();
      jj_consume_token(DRBRACKET);
      break;
      }
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ret.setCoalitions(coalitions);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      optionsSpec = ExpressionStrategyOptions();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      ;
    }
ret.processOptions(optionsSpec);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAX:
    case MIN:
    case PMAXMAX:
    case PMAXMIN:
    case PMAX:
    case PMINMAX:
    case PMINMIN:
    case PMIN:
    case P:
    case RMAXMAX:
    case RMAXMIN:
    case RMAX:
    case RMINMAX:
    case RMINMIN:
    case RMIN:
    case R:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PMAXMAX:
      case PMAXMIN:
      case PMAX:
      case PMINMAX:
      case PMINMIN:
      case PMIN:
      case P:{
        expr = ExpressionProb(prop, pathprop);
        break;
        }
      case RMAXMAX:
      case RMAXMIN:
      case RMAX:
      case RMINMAX:
      case RMINMIN:
      case RMIN:
      case R:{
        expr = ExpressionReward(prop, pathprop);
        break;
        }
      case MAX:
      case MIN:{
        expr = ExpressionMultiNash(prop,pathprop);
        break;
        }
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
ret.setSingleOperand(expr);
      break;
      }
    case LPARENTH:{
      expr = ExpressionParenth(prop, pathprop);
ret.addOperand(expr);
      break;
      }
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ret.setPosition(begin, getToken(0));
                {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// List of coalitions (player lists) for a strategy (<<>> or [[]]) operator
  static final public 
List<Coalition> ExpressionStrategyCoalitionList() throws ParseException {Coalition coalition;
        List<Coalition> coalitions = new ArrayList<Coalition>();;
    coalition = ExpressionStrategyCoalition();
coalitions.add(coalition);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        ;
        break;
        }
      default:
        jj_la1[147] = jj_gen;
        break label_45;
      }
      jj_consume_token(COLON);
      coalition = ExpressionStrategyCoalition();
coalitions.add(coalition);
    }
{if ("" != null) return coalitions;}
    throw new Error("Missing return statement in function");
}

// Coalition (player list) for a strategy (<<>> or [[]]) operator
  static final public 
Coalition ExpressionStrategyCoalition() throws ParseException {Coalition coalition = new Coalition();
        List<String> players = new ArrayList<String>();
        String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMES:{
      jj_consume_token(TIMES);
coalition.setAllPlayers();
      break;
      }
    default:
      jj_la1[150] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_INT:
      case REG_IDENT:{
        s = ExpressionStrategyCoalitionPlayer();
players.add(s);
        label_46:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[148] = jj_gen;
            break label_46;
          }
          jj_consume_token(COMMA);
          s = ExpressionStrategyCoalitionPlayer();
players.add(s);
        }
coalition.setPlayers(players);
        break;
        }
      default:
        jj_la1[149] = jj_gen;
        ;
      }
    }
{if ("" != null) return coalition;}
    throw new Error("Missing return statement in function");
}

// Single player in a coalition for a strategy (<<>> or [[]]) operator
  static final public 
String ExpressionStrategyCoalitionPlayer() throws ParseException {String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_INT:{
      jj_consume_token(REG_INT);
      break;
      }
    case REG_IDENT:{
      jj_consume_token(REG_IDENT);
      break;
      }
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
s = getToken(0).image;
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

// Options for a strategy operator
  static final public 
ArrayList<Expression> ExpressionStrategyOptions() throws ParseException, PrismLangException {Expression expr;
        ArrayList<Expression> optionsSpec;
    expr = Expression(false, false);
optionsSpec = new ArrayList<>(); optionsSpec.add(expr);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[152] = jj_gen;
        break label_47;
      }
      jj_consume_token(COMMA);
      expr = Expression(false, false);
optionsSpec.add(expr);
    }
{if ("" != null) return optionsSpec;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: label (including "init")
  static final public 
Expression ExpressionLabel(boolean prop, boolean pathprop) throws ParseException {String s;
        ExpressionLabel ret = null;
        Token begin;
if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(DQUOTE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_IDENT:{
      s = Identifier();
      break;
      }
    case INIT:{
      jj_consume_token(INIT);
s = "init";
      break;
      }
    default:
      jj_la1[153] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DQUOTE);
ret = new ExpressionLabel(s); ret.setPosition(begin, getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// (Property) expression: filter (using "filter" keyword)
  static final public 
Expression ExpressionFilter(boolean prop, boolean pathprop) throws ParseException, PrismLangException {ExpressionFilter expr = null;
        String op = null;
        Expression filter = null;
        Expression expr2 = null;
        Token begin = null;
if (!prop) {if (true) throw generateParseException();}
    // filter(
            begin = jj_consume_token(FILTER);
    jj_consume_token(LPARENTH);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIN:{
      jj_consume_token(MIN);
op = "min";
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
op = "max";
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
op = "+";
      break;
      }
    case AND:{
      jj_consume_token(AND);
op = "&";
      break;
      }
    case OR:{
      jj_consume_token(OR);
op = "|";
      break;
      }
    case REG_IDENT:{
      op = Identifier();
      break;
      }
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    expr2 = Expression(prop, pathprop);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      filter = Expression(prop, pathprop);
      break;
      }
    default:
      jj_la1[155] = jj_gen;
      ;
    }
    jj_consume_token(RPARENTH);
expr = new ExpressionFilter(op, expr2, filter); expr.setPosition(begin, getToken(0)); {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

//-----------------------------------------------------------------------------------
// Miscellaneous stuff
//-----------------------------------------------------------------------------------

// Identifier (returns String)
  static final public 
String Identifier() throws ParseException {
    jj_consume_token(REG_IDENT);
{if ("" != null) return getToken(0).image;}
    throw new Error("Missing return statement in function");
}

  static final public UncertainExpression UncertainExpression() throws ParseException {String ident;
    jj_consume_token(AND);
    ident = Identifier();
{if ("" != null) return new UncertainExpression("&" + ident);}
    throw new Error("Missing return statement in function");
}

// Identifier (returns ExpressionIdent, storing position info)
  static final public 
ExpressionIdent IdentifierExpression() throws ParseException {String ident;
        ExpressionIdent ret;
    ident = Identifier();
ret = new ExpressionIdent(ident); ret.setPosition(getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Identifier or min/max keyword (returns ExpressionIdent, storing position info)
  static final public 
ExpressionIdent IdentifierExpressionMinMax() throws ParseException {String ident;
        ExpressionIdent ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REG_IDENT:{
      ident = Identifier();
      break;
      }
    case MIN:{
      jj_consume_token(MIN);
ident="min";
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
ident="max";
      break;
      }
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ret = new ExpressionIdent(ident); ret.setPosition(getToken(0)); {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

// Primed identifier
  static final public 
ExpressionIdent IdentifierPrime() throws ParseException, PrismLangException {Token token;
        Expression i = null;
        Expression j = null;
    token = jj_consume_token(REG_IDENTPRIME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      i = Expression(false, false);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        j = Expression(false, false);
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[158] = jj_gen;
      ;
    }
// Remove prime, create new ident and return
                String s = token.image;
                s = s.substring(0, s.length()-1);

                ExpressionIdent expr;

                if (Objects.nonNull(i) && Objects.nonNull(j)) {
                        expr = new ExpressionArrayIndex(s, i, j, lineLengths.get(s));
                } else if (Objects.nonNull(i)) {
                        expr = new ExpressionArrayIndex(s, ZERO.clone().deepCopy(), i, lineLengths.get(s));
                } else {
                        expr = new ExpressionIdent(s);
                }

                expr.setPosition(token);
                expr.setEndColumn(expr.getEndColumn() - 1);
                expr.setPrime(true);
                {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

// Equality operators: =, !=
  static final public 
int EqNeq() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
{if ("" != null) return ExpressionBinaryOp.EQ;}
      break;
      }
    case NE:{
      jj_consume_token(NE);
{if ("" != null) return ExpressionBinaryOp.NE;}
      break;
      }
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Relational operators: >, <, >=, <=
  static final public 
int LtGt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      jj_consume_token(GT);
{if ("" != null) return ExpressionBinaryOp.GT;}
      break;
      }
    case LT:{
      jj_consume_token(LT);
{if ("" != null) return ExpressionBinaryOp.LT;}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return ExpressionBinaryOp.GE;}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return ExpressionBinaryOp.LE;}
      break;
      }
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// For loop
  static final public 
ForLoop ForLoop() throws ParseException, PrismLangException {String s;
        Expression from = null, to = null, step = null;
        ForLoop fl = new ForLoop();
        Token begin;
begin = getToken(1);
    s = Identifier();
    jj_consume_token(EQ);
    from = Expression(false, false);
    jj_consume_token(COLON);
    to = Expression(false, false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      step = Expression(false, false);
      break;
      }
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    jj_consume_token(0);
fl.setLHS(s);
                fl.setFrom(from);
                fl.setTo(to);
                if (step != null) fl.setStep(step);
                fl.setPosition(begin, getToken(0));
                {if ("" != null) return fl;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_3R_ExpressionBasic_1897_17_153()
 {
    if (jj_3R_ExpressionFuncMinMax_1967_9_166()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1895_17_152()
 {
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1943_9_165()) return true;
    return false;
  }

  static private boolean jj_3R_SystemParallel_1519_9_69()
 {
    if (jj_3R_SystemHideRename_1547_9_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SystemParallel_1521_11_80()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1893_17_151()
 {
    if (jj_3R_ExpressionLiteral_2003_9_164()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionPlusMinus_1845_62_145()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1892_9_150()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionBasic_1893_17_151()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1895_17_152()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1897_17_153()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1899_17_154()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1901_17_155()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1904_17_156()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1906_17_157()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1908_17_158()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1910_17_159()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1912_17_160()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1914_17_161()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1916_17_162()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionBasic_1918_17_163()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_IdentifierPrime_2649_18_89()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2272_11_277()
 {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RewardIndex_2272_33_285()) {
    jj_scanpos = xsp;
    if (jj_3R_RewardIndex_2272_101_286()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_IdentifierPrime_2648_18_78()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IdentifierPrime_2649_18_89()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionUnaryMinus_1880_17_147()
 {
    if (jj_3R_ExpressionBasic_1892_9_150()) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2269_10_276()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(DISCOUNT)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2267_10_273()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionUnaryMinus_1877_17_146()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_ExpressionUnaryMinus_1876_9_142()) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2265_9_262()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RewardIndex_2267_10_273()) {
    jj_scanpos = xsp;
    if (jj_3R_RewardIndex_2267_75_274()) {
    jj_scanpos = xsp;
    if (jj_3R_RewardIndex_2267_125_275()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_RewardIndex_2269_10_276()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_RewardIndex_2272_11_277()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_IdentifierPrime_2646_9_68()
 {
    if (jj_scan_token(REG_IDENTPRIME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IdentifierPrime_2648_18_78()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_SystemInterleaved_1495_9_62()
 {
    if (jj_3R_SystemParallel_1519_9_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemInterleaved_1497_70_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionUnaryMinus_1876_9_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionUnaryMinus_1877_17_146()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionUnaryMinus_1880_17_147()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionTimesDivide_1862_19_148()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTimesDivide_1862_17_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTimesDivide_1862_19_148()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTimesDivide_1862_64_149()) return true;
    }
    if (jj_3R_ExpressionUnaryMinus_1876_9_142()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyOptions_2541_103_271()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2579_56_217()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTimesDivide_1860_9_138()
 {
    if (jj_3R_ExpressionUnaryMinus_1876_9_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionTimesDivide_1862_17_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_SystemFullParallel_1472_9_55()
 {
    if (jj_3R_SystemInterleaved_1495_9_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemFullParallel_1474_71_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionPlusMinus_1845_19_144()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2220_26_268()
 {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_IdentifierExpression_2620_9_52()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2219_26_267()
 {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionPlusMinus_1845_17_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionPlusMinus_1845_19_144()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPlusMinus_1845_62_145()) return true;
    }
    if (jj_3R_ExpressionTimesDivide_1860_9_138()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2218_26_266()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2233_10_203()
 {
    if (jj_scan_token(RMAXMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2216_26_265()
 {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2225_17_241()
 {
    if (jj_scan_token(MAXMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2232_10_202()
 {
    if (jj_scan_token(RMAXMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2215_26_264()
 {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2224_17_240()
 {
    if (jj_scan_token(MAXMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2231_10_201()
 {
    if (jj_scan_token(RMINMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2214_26_263()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2223_17_239()
 {
    if (jj_scan_token(MINMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2230_10_200()
 {
    if (jj_scan_token(RMINMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2222_17_238()
 {
    if (jj_scan_token(MINMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2229_10_199()
 {
    if (jj_scan_token(RMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2228_10_198()
 {
    if (jj_scan_token(RMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2218_17_237()
 {
    if (jj_scan_token(MAX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2218_26_266()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2219_26_267()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2220_26_268()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionPlusMinus_1843_9_135()
 {
    if (jj_3R_ExpressionTimesDivide_1860_9_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionPlusMinus_1845_17_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_SystemDefn_1459_9_51()
 {
    if (jj_3R_SystemFullParallel_1472_9_55()) return true;
    return false;
  }

  static private boolean jj_3R_UncertainExpression_2608_9_49()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2214_17_236()
 {
    if (jj_scan_token(MIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2214_26_263()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2215_26_264()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2216_26_265()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2213_17_235()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2212_18_234()
 {
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2579_34_216()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2578_35_214()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_SystemDefn_1459_9_51()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2211_18_233()
 {
    if (jj_3R_RewardIndex_2265_9_262()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2210_19_232()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionSS_2171_55_59()
 {
    if (jj_3R_Filter_2139_9_67()) return true;
    return false;
  }

  static private boolean jj_3R_Identifier_2600_9_48()
 {
    if (jj_scan_token(REG_IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLabel_2557_47_212()
 {
    if (jj_scan_token(INIT)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2209_10_197()
 {
    if (jj_scan_token(R)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2210_19_232()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2211_18_233()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2212_18_234()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2213_17_235()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2214_17_236()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2218_17_237()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2222_17_238()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2223_17_239()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2224_17_240()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2225_17_241()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionRelop_1823_11_136()
 {
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_ExpressionPlusMinus_1843_9_135()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2207_9_170()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2209_10_197()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2228_10_198()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2229_10_199()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2230_10_200()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2231_10_201()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2232_10_202()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionReward_2233_10_203()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_ExpressionRewardContents_2298_9_204()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionReward_2235_69_205()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRelop_1822_9_133()
 {
    if (jj_3R_ExpressionPlusMinus_1843_9_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionRelop_1823_11_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2584_11_219()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2580_11_218()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2579_11_215()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2578_11_213()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLabel_2557_30_211()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionEquality_1809_11_134()
 {
    if (jj_3R_EqNeq_2679_9_137()) return true;
    if (jj_3R_ExpressionRelop_1822_9_133()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionEquality_1808_9_132()
 {
    if (jj_3R_ExpressionRelop_1822_9_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionEquality_1809_11_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionFilter_2573_9_175()
 {
    if (jj_scan_token(FILTER)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFilter_2578_11_213()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFilter_2578_35_214()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFilter_2579_11_215()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFilter_2579_34_216()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFilter_2579_56_217()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFilter_2580_11_218()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFilter_2584_11_219()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionNot_1794_17_131()
 {
    if (jj_3R_ExpressionEquality_1808_9_132()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionNot_1792_17_130()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_ExpressionNot_1791_9_128()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1709_99_123()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2480_93_254()
 {
    if (jj_3R_ExpressionMultiNash_2332_9_272()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1708_99_121()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1707_99_119()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1706_99_117()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionSS_2166_19_64()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionSS_2168_17_57()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionNot_1791_9_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionNot_1792_17_130()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNot_1794_17_131()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionSS_2166_17_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionSS_2166_19_64()) jj_scanpos = xsp;
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLabel_2555_9_174()
 {
    if (jj_scan_token(DQUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionLabel_2557_30_211()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionLabel_2557_47_212()) return true;
    }
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionAnd_1779_11_129()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_ExpressionNot_1791_9_128()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionSS_2163_9_53()
 {
    if (jj_scan_token(S)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionSS_2166_17_56()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionSS_2168_17_57()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionSS_2171_55_59()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionAnd_1778_9_126()
 {
    if (jj_3R_ExpressionNot_1791_9_128()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionAnd_1779_11_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyOptions_2541_9_251()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionStrategyOptions_2541_103_271()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2110_51_196()
 {
    if (jj_3R_Filter_2139_9_67()) return true;
    return false;
  }

  static private boolean jj_3R_Filter_2142_19_88()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionOr_1766_11_127()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_ExpressionAnd_1778_9_126()) return true;
    return false;
  }

  static private boolean jj_3R_Filter_2141_19_87()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionOr_1765_9_124()
 {
    if (jj_3R_ExpressionAnd_1778_9_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionOr_1766_11_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalitionPlayer_2529_9_296()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  static private boolean jj_3R_Filter_2140_11_77()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Filter_2141_19_87()) {
    jj_scanpos = xsp;
    if (jj_3R_Filter_2142_19_88()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2480_51_253()
 {
    if (jj_3R_ExpressionReward_2207_9_170()) return true;
    return false;
  }

  static private boolean jj_3R_Filter_2139_9_67()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Filter_2140_11_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionIff_1753_11_125()
 {
    if (jj_scan_token(IFF)) return true;
    if (jj_3R_ExpressionOr_1765_9_124()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalition_2516_13_297()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ExpressionStrategyCoalitionPlayer_2529_9_296()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionIff_1752_9_114()
 {
    if (jj_3R_ExpressionOr_1765_9_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionIff_1753_11_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalition_2515_11_287()
 {
    if (jj_3R_ExpressionStrategyCoalitionPlayer_2529_9_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionStrategyCoalition_2516_13_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalition_2515_9_279()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategyCoalition_2515_11_287()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalition_2513_11_278()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalition_2513_9_269()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategyCoalition_2513_11_278()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionStrategyCoalition_2515_9_279()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionImplies_1740_11_115()
 {
    if (jj_scan_token(IMPLIES)) return true;
    if (jj_3R_ExpressionIff_1752_9_114()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionImplies_1739_9_104()
 {
    if (jj_3R_ExpressionIff_1752_9_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionImplies_1740_11_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalitionList_2500_10_270()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_ExpressionStrategyCoalition_2513_9_269()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategyCoalitionList_2499_9_250()
 {
    if (jj_3R_ExpressionStrategyCoalition_2513_9_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionStrategyCoalitionList_2500_10_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionITE_1725_17_105()
 {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_ExpressionImplies_1739_9_104()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_ExpressionITE_1723_9_97()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2095_26_261()
 {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2094_26_260()
 {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2093_26_259()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2108_10_195()
 {
    if (jj_scan_token(PMAXMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2091_26_258()
 {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2100_17_231()
 {
    if (jj_scan_token(MAXMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2107_10_194()
 {
    if (jj_scan_token(PMAXMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2090_26_257()
 {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2099_17_230()
 {
    if (jj_scan_token(MAXMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2106_10_193()
 {
    if (jj_scan_token(PMINMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2089_26_256()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2098_17_229()
 {
    if (jj_scan_token(MINMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2105_10_192()
 {
    if (jj_scan_token(PMINMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionITE_1723_9_97()
 {
    if (jj_3R_ExpressionImplies_1739_9_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionITE_1725_17_105()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2097_17_228()
 {
    if (jj_scan_token(MINMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2104_10_191()
 {
    if (jj_scan_token(PMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2103_10_190()
 {
    if (jj_scan_token(PMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2087_25_224()
 {
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2086_26_223()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1709_20_122()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1708_20_120()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2093_17_227()
 {
    if (jj_scan_token(MAX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2093_26_259()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2094_26_260()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2095_26_261()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2482_11_210()
 {
    if (jj_3R_ExpressionParenth_2043_9_168()) return true;
    return false;
  }

  static private boolean jj_3R_Update_1308_36_61()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_UpdateElement_1321_9_60()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1707_20_118()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1706_20_116()
 {
    if (jj_3R_IdentifierExpression_2620_9_52()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2480_11_252()
 {
    if (jj_3R_ExpressionProb_2084_9_169()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2089_17_226()
 {
    if (jj_scan_token(MIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2089_26_256()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2090_26_257()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2091_26_258()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2480_9_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategy_2480_11_252()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionStrategy_2480_51_253()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionStrategy_2480_93_254()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2088_17_225()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1711_11_111()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1710_11_110()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2476_10_208()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_ExpressionStrategyOptions_2541_9_251()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1709_11_109()
 {
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TimeBound_1709_20_122()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1709_99_123()) return true;
    }
    return false;
  }

  static private boolean jj_3R_MultiNashRewardIndexes_2412_73_300()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1708_11_108()
 {
    if (jj_scan_token(GE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TimeBound_1708_20_120()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1708_99_121()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2473_11_207()
 {
    if (jj_scan_token(DLBRACKET)) return true;
    if (jj_3R_ExpressionStrategyCoalitionList_2499_9_250()) return true;
    if (jj_scan_token(DRBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1707_11_107()
 {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TimeBound_1707_20_118()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1707_99_119()) return true;
    }
    return false;
  }

  static private boolean jj_3R_TimeBound_1706_11_106()
 {
    if (jj_scan_token(LE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TimeBound_1706_20_116()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1706_99_117()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2472_10_206()
 {
    if (jj_scan_token(DLT)) return true;
    if (jj_3R_ExpressionStrategyCoalitionList_2499_9_250()) return true;
    if (jj_scan_token(DGT)) return true;
    return false;
  }

  static private boolean jj_3R_TimeBound_1706_9_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TimeBound_1706_11_106()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1707_11_107()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1708_11_108()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1709_11_109()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1710_11_110()) {
    jj_scanpos = xsp;
    if (jj_3R_TimeBound_1711_11_111()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2086_10_189()
 {
    if (jj_scan_token(P)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2086_26_223()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2087_25_224()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2088_17_225()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2089_17_226()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2093_17_227()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2097_17_228()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2098_17_229()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2099_17_230()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2100_17_231()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_UpdateElement_1321_9_60()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_IdentifierPrime_2646_9_68()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionStrategy_2469_9_173()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategy_2472_10_206()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionStrategy_2473_11_207()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategy_2476_10_208()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionStrategy_2480_9_209()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionStrategy_2482_11_210()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1693_17_82()
 {
    if (jj_3R_ExpressionITE_1723_9_97()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionProb_2084_9_169()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2086_10_189()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2103_10_190()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2104_10_191()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2105_10_192()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2106_10_193()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2107_10_194()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionProb_2108_10_195()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionProb_2110_51_196()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1689_19_96()
 {
    if (jj_3R_TimeBound_1706_9_98()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1688_19_95()
 {
    if (jj_scan_token(G)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1687_19_94()
 {
    if (jj_scan_token(F)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1686_19_93()
 {
    if (jj_scan_token(X)) return true;
    return false;
  }

  static private boolean jj_3R_Update_1308_10_54()
 {
    if (jj_3R_UpdateElement_1321_9_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Update_1308_36_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1684_17_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalUnary_1686_19_93()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalUnary_1687_19_94()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalUnary_1688_19_95()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalUnary_1689_19_96()) jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalUnary_1682_9_75()) return true;
    return false;
  }

  static private boolean jj_3R_Update_1306_9_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Update_1308_10_54()) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2336_122_291()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionForAll_2448_9_172()
 {
    if (jj_scan_token(A)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_Update_1306_9_50()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalUnary_1682_9_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalUnary_1684_17_81()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalUnary_1693_17_82()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2334_122_289()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1668_19_86()
 {
    if (jj_3R_TimeBound_1706_9_98()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1667_19_85()
 {
    if (jj_scan_token(R)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1666_19_84()
 {
    if (jj_scan_token(W)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1665_19_83()
 {
    if (jj_scan_token(U)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncArgs_1993_72_222()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOldStyle_1981_83_188()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1663_17_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalBinary_1665_19_83()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalBinary_1666_19_84()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalBinary_1667_19_85()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalBinary_1668_19_86()) jj_scanpos = xsp;
    if (jj_3R_ExpressionTemporalUnary_1682_9_75()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionExists_2429_9_171()
 {
    if (jj_scan_token(E)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTemporalBinary_1660_9_66()
 {
    if (jj_3R_ExpressionTemporalUnary_1682_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionTemporalBinary_1663_17_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionParenth_2043_9_168()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOldStyle_1981_60_187()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3R_MultiNashRewardIndexes_2412_10_299()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLiteral_2030_9_179()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_MultiNashRewardIndexes_2411_9_298()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MultiNashRewardIndexes_2412_10_299()) {
    jj_scanpos = xsp;
    if (jj_3R_MultiNashRewardIndexes_2412_73_300()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLiteral_2028_9_178()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLiteral_2017_9_177()
 {
    if (jj_scan_token(REG_DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_Expression_1630_9_58()
 {
    if (jj_3R_ExpressionTemporalBinary_1660_9_66()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOldStyle_1981_37_186()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNashReward_2391_9_293()
 {
    if (jj_scan_token(R)) return true;
    if (jj_3R_MultiNashRewardIndexes_2411_9_298()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_ExpressionRewardContents_2298_9_204()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1552_81_112()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLiteral_2004_9_176()
 {
    if (jj_scan_token(REG_INT)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionLiteral_2003_9_164()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionLiteral_2004_9_176()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionLiteral_2017_9_177()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionLiteral_2028_9_178()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionLiteral_2030_9_179()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_RewardIndex_2267_125_275()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncMinMax_1967_42_184()
 {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncArgs_1993_9_185()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionFuncArgs_1993_72_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNashProb_2369_9_292()
 {
    if (jj_scan_token(P)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2272_101_286()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOldStyle_1981_9_167()
 {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncOldStyle_1981_37_186()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFuncOldStyle_1981_60_187()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFuncOldStyle_1981_83_188()) return true;
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ExpressionFuncArgs_1993_9_185()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2347_25_295()
 {
    if (jj_3R_ExpressionMultiNashReward_2391_9_293()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2345_26_294()
 {
    if (jj_3R_ExpressionMultiNashProb_2369_9_292()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1952_34_255()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2344_18_284()
 {
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionMultiNash_2345_26_294()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionMultiNash_2347_25_295()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionFuncMinMax_1967_11_183()
 {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2342_17_283()
 {
    if (jj_3R_ExpressionMultiNashReward_2391_9_293()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncMinMax_1967_9_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncMinMax_1967_11_183()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFuncMinMax_1967_42_184()) return true;
    }
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_ExpressionFuncArgs_1993_9_185()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2340_18_282()
 {
    if (jj_3R_ExpressionMultiNashProb_2369_9_292()) return true;
    return false;
  }

  static private boolean jj_3R_SystemAtomic_1582_10_101()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_SystemDefn_1459_9_51()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_SystemAtomic_1580_10_100()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_SystemParallel_1522_65_92()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_SystemAtomic_1578_9_99()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2336_16_290()
 {
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1950_19_221()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1952_34_255()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1944_25_180()
 {
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1949_19_220()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_ExpressionFuncArgs_1993_9_185()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1949_19_182()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1949_19_220()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1950_19_221()) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2334_16_288()
 {
    if (jj_3R_LtGt_2689_9_65()) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_SystemAtomic_1575_9_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SystemAtomic_1578_9_99()) {
    jj_scanpos = xsp;
    if (jj_3R_SystemAtomic_1580_10_100()) {
    jj_scanpos = xsp;
    if (jj_3R_SystemAtomic_1582_10_101()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1945_19_181()
 {
    if (jj_3R_IdentifierPrime_2646_9_68()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2336_9_281()
 {
    if (jj_scan_token(MAX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionMultiNash_2336_16_290()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionMultiNash_2336_122_291()) return true;
    }
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1559_19_113()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(RENAME)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2334_9_280()
 {
    if (jj_scan_token(MIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionMultiNash_2334_16_288()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionMultiNash_2334_122_289()) return true;
    }
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2267_75_274()
 {
    if (jj_scan_token(DISCOUNT)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionMultiNash_2332_9_272()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionMultiNash_2334_9_280()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionMultiNash_2336_9_281()) return true;
    }
    if (jj_scan_token(LPARENTH)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionMultiNash_2340_18_282()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionMultiNash_2342_17_283()) return true;
    }
    if (jj_3R_ExpressionMultiNash_2344_18_284()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionMultiNash_2344_18_284()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1943_9_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1944_25_180()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1945_19_181()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_ExpressionFuncOrIdentOrArrayIndexing_1949_19_182()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_SystemInterleaved_1497_70_70()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_SystemFullParallel_1472_9_55()) return true;
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1556_11_103()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(RENAME)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemHideRename_1559_19_113()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_scan_token(C)) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1550_9_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SystemHideRename_1550_9_102()) {
    jj_scanpos = xsp;
    if (jj_3R_SystemHideRename_1556_11_103()) return true;
    }
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1550_9_102()
 {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemHideRename_1552_81_112()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2312_11_249()
 {
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_SystemHideRename_1547_9_79()
 {
    if (jj_3R_SystemAtomic_1575_9_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemHideRename_1550_9_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2309_11_248()
 {
    if (jj_scan_token(F0)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_3R_ExpressionSS_2163_9_53()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2308_11_247()
 {
    if (jj_scan_token(Fc)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2307_11_246()
 {
    if (jj_scan_token(I)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1918_17_163()
 {
    if (jj_3R_ExpressionFilter_2573_9_175()) return true;
    return false;
  }

  static private boolean jj_3R_LtGt_2692_9_74()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2306_11_245()
 {
    if (jj_scan_token(C)) return true;
    return false;
  }

  static private boolean jj_3R_LtGt_2691_9_73()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2305_11_244()
 {
    if (jj_scan_token(C)) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_Expression_1630_9_58()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1916_17_162()
 {
    if (jj_3R_ExpressionLabel_2555_9_174()) return true;
    return false;
  }

  static private boolean jj_3R_LtGt_2690_9_72()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_LtGt_2689_9_71()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_LtGt_2689_9_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LtGt_2689_9_71()) {
    jj_scanpos = xsp;
    if (jj_3R_LtGt_2690_9_72()) {
    jj_scanpos = xsp;
    if (jj_3R_LtGt_2691_9_73()) {
    jj_scanpos = xsp;
    if (jj_3R_LtGt_2692_9_74()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1914_17_161()
 {
    if (jj_3R_ExpressionStrategy_2469_9_173()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2302_11_243()
 {
    if (jj_scan_token(S)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1912_17_160()
 {
    if (jj_3R_ExpressionForAll_2448_9_172()) return true;
    return false;
  }

  static private boolean jj_3R_SystemFullParallel_1474_71_63()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_SystemParallel_1519_9_69()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2301_9_242()
 {
    if (jj_3R_ExpressionSS_2163_9_53()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1910_17_159()
 {
    if (jj_3R_ExpressionExists_2429_9_171()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionTimesDivide_1862_64_149()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1908_17_158()
 {
    if (jj_3R_ExpressionReward_2207_9_170()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRewardContents_2298_9_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionRewardContents_2301_9_242()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2302_11_243()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2305_11_244()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2306_11_245()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2307_11_246()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2308_11_247()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2309_11_248()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionRewardContents_2312_11_249()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) jj_scanpos = xsp;
    if (jj_3R_UncertainExpression_2608_9_49()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1906_17_157()
 {
    if (jj_3R_ExpressionSS_2163_9_53()) return true;
    return false;
  }

  static private boolean jj_3R_EqNeq_2680_9_141()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3R_RewardIndex_2272_33_285()
 {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_EqNeq_2679_9_137()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EqNeq_2679_9_140()) {
    jj_scanpos = xsp;
    if (jj_3R_EqNeq_2680_9_141()) return true;
    }
    return false;
  }

  static private boolean jj_3R_EqNeq_2679_9_140()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionReward_2235_69_205()
 {
    if (jj_3R_Filter_2139_9_67()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1904_17_156()
 {
    if (jj_3R_ExpressionProb_2084_9_169()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1901_17_155()
 {
    if (jj_3R_ExpressionParenth_2043_9_168()) return true;
    return false;
  }

  static private boolean jj_3R_ExpressionBasic_1899_17_154()
 {
    if (jj_3R_ExpressionFuncOldStyle_1981_9_167()) return true;
    return false;
  }

  static private boolean jj_3R_SystemParallel_1521_11_80()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Identifier_2600_9_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SystemParallel_1522_65_92()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_SystemHideRename_1547_9_79()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PrismParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[162];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x208023c0,0x208023c0,0x0,0x3404048,0x0,0x3404048,0x3404048,0x0,0x3404048,0x2000,0x0,0x100,0x2380,0x47404008,0x0,0x47404008,0x0,0x0,0x0,0x0,0x0,0x47404008,0x0,0x0,0x10,0x0,0x1010,0x0,0x0,0x40,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x47404008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x47404008,0x47404008,0x0,0x0,0x0,0x47404008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44000000,0x0,0x47404008,0x47404008,0x47404008,0x47404008,0x47404008,0x0,0x0,0x0,0x0,0x0,0x0,0x3404008,0x0,0x0,0x0,0x0,0x0,0x0,0x3404008,0x3404008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x47404808,0x0,0x47404008,0x0,0x0,0x5f404408,0x0,0x0,0x0,0x0,0x0,0x0,0x47404008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xfc01d111,0xf8004110,0x4019001,0x43f80890,0x0,0x43f80890,0x43f80890,0x0,0x43f80890,0x20000000,0x4100,0x0,0xb8004100,0x3f82880,0x0,0x3fa2880,0x0,0x0,0x0,0x0,0x0,0x3f82880,0x0,0x0,0x8,0x0,0x8,0x40000000,0x0,0x40000000,0x1,0x40008,0x0,0x0,0x0,0x0,0x0,0x3f82880,0x0,0x8,0x8,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x880,0x0,0x0,0x880,0x0,0x0,0x880,0x880,0x0,0x3f82880,0x3f82880,0x0,0x0,0x0,0x3f82880,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x3f82880,0x3f82880,0x3f82880,0x3f82880,0x3f82880,0x0,0x0,0x0,0x0,0x0,0x0,0x3f80880,0x0,0x0,0x0,0x0,0x0,0x0,0x3f80880,0x3f80880,0x0,0x0,0x0,0x0,0x880,0x880,0x0,0x0,0x0,0x880,0x880,0xee0,0x3f80000,0x0,0x0,0x880,0x0,0x0,0x0,0x0,0x0,0x880,0x880,0xee0,0x0,0x0,0x3f82880,0x0,0x3f82880,0x0,0x0,0x3f82884,0x0,0x0,0x880,0x2000000,0x2000000,0x0,0x3f82880,0x0,0x0,0x3f80880,0x3f80880,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x880,0x0,0x880,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x7c03,0x5c01,0x2002,0x200483fd,0x4000000,0x200483fd,0x200483fd,0x4000000,0x200483fd,0x0,0x0,0x400,0x5c00,0x200483fc,0x8000000,0x200483fc,0x80000000,0x8000000,0x8000000,0x8000000,0x8000000,0x200483fc,0x0,0x80000000,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x80000000,0x80000000,0x8000000,0x8000000,0x8000000,0x8000000,0x200483fc,0x0,0x0,0x0,0x0,0x80000000,0x1800000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x80000000,0x80000000,0x20000000,0x0,0x0,0xa00483fc,0xa00483fc,0x80000,0x20008000,0x8000000,0xa00483fc,0x80000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x20000000,0x8000000,0x80000000,0x80000000,0x30100,0x80000000,0x30100,0x0,0x80000000,0x200483fc,0x200483fc,0x200483fc,0x200483fc,0x200483fc,0x80000000,0x0,0x200000,0x400000,0x100000,0x80000,0x200483fc,0x0,0x0,0x0,0x0,0x0,0x0,0x200083fc,0x200083fc,0x0,0x80000000,0xa0000000,0xa0000000,0x0,0x0,0x8000000,0x8000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x1fc,0x0,0x200483fc,0x8000000,0x200483fc,0x0,0x200,0x200483fc,0x0,0x0,0x0,0x100,0x100,0x0,0x200483fc,0x0,0x0,0x1fc,0x200001fc,0x2000000,0x8000000,0x0,0x0,0x0,0x8000000,0x0,0x180000,0x8000000,0x0,0x80000000,0x80000000,0x0,0x0,0x2000000,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x1f04202,0x0,0x1f04202,0x1f04202,0x0,0x1f04202,0x0,0x0,0x0,0x0,0x1f0420a,0x0,0x1f04202,0x0,0x0,0x0,0x0,0x0,0x1f0420a,0x20,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f0420a,0x20,0x1000000,0x1000000,0x0,0x0,0x0,0x2000,0x0,0x2000,0x1820,0x2000,0x4000,0x8000,0x1604000,0x6000,0x18000,0x1604000,0x0,0x0,0x1600000,0x0,0x2000,0x1f04202,0x1f04202,0x0,0x0,0x0,0x1f04202,0x0,0x0,0x1000000,0x0,0x0,0x10008,0x0,0x0,0x10008,0x1100000,0x0,0x1000000,0x1000000,0x0,0x19a0,0x0,0x0,0x19a0,0x1f04202,0x1f04202,0x1f04202,0x1f04202,0x1f04202,0x19a0,0x80000,0x0,0x0,0x0,0x0,0x1f04202,0x60,0x1980,0x6000,0x6000,0x18000,0x18000,0x1f04202,0x1f00202,0x1800000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x600000,0x0,0x20,0x20,0x19a0,0x0,0x8,0x8,0x0,0x0,0x19a0,0x8,0x0,0x8,0x20,0x20,0x19a0,0x0,0x8,0x1f04202,0x0,0x1f04202,0x10000,0x0,0x1f04202,0x19a0,0x19a0,0x0,0x0,0x0,0x2000,0x1f04202,0x202,0x8,0x0,0x0,0x0,0x0,0x1200000,0x8000,0x1200000,0x0,0x1000000,0x1002000,0x0,0x1000000,0x0,0x0,0x60,0x1980,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[20];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PrismParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PrismParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PrismParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PrismParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PrismParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PrismParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PrismParser(PrismParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PrismParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 162; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[124];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 162; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 124; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 20; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

//-----------------------------------------------------------------------------------

